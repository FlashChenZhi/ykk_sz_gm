// $Id: skeltenBusiness.java,v 1.2 2007/03/07 07:45:23 suresh Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Stockout;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListHandler.RetrievalPlankeySortableHandler;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.StockoutListProxy;
import jp.co.daifuku.wms.YkkGMAX.PageController.PageController;
import jp.co.daifuku.wms.YkkGMAX.PageController.StockoutPager;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.resident.AfterRservationDataDeleteRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.AfterStockoutRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ProcessorInvoker;
import jp.co.daifuku.wms.YkkGMAX.resident.NormalRsvDataDeleteProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.StockoutAutoRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.StockoutDesignateRequestProcessor;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.2 $, $Date: 2007/03/07 07:45:23 $
 * @author $Author: suresh $
 */
public class StockoutBusiness extends Stockout implements WMSConstants
{
	// Class fields --------------------------------------------------

	// Class variables -----------------------------------------------

	// Class method --------------------------------------------------

	// Constructors --------------------------------------------------

	// Public methods ------------------------------------------------

	private final String DISPLAY_FINISHED_RETRIEVAL = "DISPLAY_FINISHED_RETRIEVAL";

	private final String DIALOG_FLAG2 = "DIALOG_FLAG2";

	private final String DESIGNATE_LOCATION_COUNT = "DESIGNATE_LOCATION_COUNT";

	private final String AUTO_LIST = "AUTO_LIST";

	private final String DESIGNATE_LOCATION_LIST = "DESIGNATE_LOCATION_LIST";

	private final String LINE_DIVISION = "LINE_DIVISION";

	private final String STOCKOUT_STATION_1 = "STOCKOUT_STATION_1";

	private final String LINE = "LINE";

	private final String STOCKOUT_STATION_2 = "STOCKOUT_STATION_2";

	private final String SEARCH_MODE = "SEARCH_MODE";

	private final String SECTION = "SECTION";

	private final String ORDER_MODE = "ORDER_MODE";

	private final String DIALOG_FLAG = "DIALOG_FLAG";

	private final PageController pageController = new PageController(
			new StockoutPager(this, pgr_Up), new StockoutPager(this, pgr_Low),
			message);

	private final StockoutListProxy listProxy = new StockoutListProxy(
			lst_Stockout, this);

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Delete_Click(ActionEvent e) throws Exception
	{
		InitDlg();
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList manuList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);
		if (autoList.size() <= 0 && manuList.size() <= 0)
		{
			message.setMsgResourceKey("7000024");
			return;
		}

		if (txt_StockOutDeletionPassword.getText().trim().equals(""))
		{
			message.setMsgResourceKey("8000196");
			setFocus(txt_StockOutDeletionPassword);
			return;
		} else if (!txt_StockOutDeletionPassword.getText().equals("62368600"))
		{
			message.setMsgResourceKey("8000197");
			setFocus(txt_StockOutDeletionPassword);
			return;
		}

		setConfirm("YKK-LBL-DeleteConfirm");
		getViewState().setBoolean(DIALOG_FLAG2, true);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Delete_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Help_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Low_Click(ActionEvent e) throws Exception
	{
		btn_Set_Up_Click(null);
	}

	// Package methods -----------------------------------------------

	// Protected methods ---------------------------------------------

	// Private methods -----------------------------------------------

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Low_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Up_Click(ActionEvent e) throws Exception
	{
		InitDlg();
		ArrayList designateStockoutEntityList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);
		if (designateStockoutEntityList.size() > 0)
		{
			redirect("/YkkGMAX/Stockout/StockoutPopup.do", null, "/progress.do");
		} else
		{
			redirect("/YkkGMAX/Stockout/StockoutPopup.do", null);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Up_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Show_Click(ActionEvent e) throws Exception
	{
		ValidateCheck();

		InitSession();

		lst_Stockout.clearRow();

		session.setAttribute(LINE_DIVISION, txt_LineDivision.getText());
		session.setAttribute(STOCKOUT_STATION_1, pul_StockoutStation1
				.getSelectedValue());
		session.setAttribute(LINE, txt_Line.getText());
		session.setAttribute(STOCKOUT_STATION_2, pul_StockoutStation2
				.getSelectedValue());
		session.setAttribute(SECTION, txt_Section.getText());
		if (rdo_OtherProcedure.getChecked())
		{
			session.setAttribute(SEARCH_MODE, "1");
		} else if (rdo_AssemblyLineWorkingProcedu.getChecked())
		{
			session.setAttribute(SEARCH_MODE, "2");
		} else
		{
			session.setAttribute(SEARCH_MODE, "3");
		} 
		if (rdo_WhenNextWorkBegin.getChecked())
		{
			session.setAttribute(ORDER_MODE, "1");
		} else if (rdo_WhenThisWorkFinishInPlan.getChecked())
		{
			session.setAttribute(ORDER_MODE, "2");
		} else if(this.rdo_ItemNo.getChecked())
		{
			session.setAttribute(ORDER_MODE, "3");
		}
		else
		{
			session.setAttribute(ORDER_MODE, "4");
		}
		if (chk_DisplayFinishedRetrieval.getChecked())
		{
			session.setAttribute(DISPLAY_FINISHED_RETRIEVAL, "1");
		} else
		{
			session.setAttribute(DISPLAY_FINISHED_RETRIEVAL, "0");
		}
		try
		{
			pageController.init();
			pageController.setCountPerPage(30);
			pageController.turnToFirstPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Show_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_ToMenu_Click(ActionEvent e) throws Exception
	{
		forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
				.getString(M_MENUID_KEY)));
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_ToMenu_Server(ActionEvent e) throws Exception
	{
	}

	private void InitDlg()
	{
		this.getViewState().setBoolean(DIALOG_FLAG, false);
		this.getViewState().setBoolean(DIALOG_FLAG2, false);
	}

	private void InitSession()
	{
		session.setAttribute(DESIGNATE_LOCATION_COUNT, "0");
		session.setAttribute(AUTO_LIST, new ArrayList());
		session.setAttribute(DESIGNATE_LOCATION_LIST, new ArrayList());
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_Line_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_LineDivision_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_OrderBy_Server(ActionEvent e) throws Exception
	{
	}

	// Event handler methods -----------------------------------------
	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_SettingName_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_StockoutStation_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */

	public void lst_Stockout_Change(ActionEvent e) throws Exception
	{

		int row = Integer.parseInt(e.getEventArgs().get(0).toString());
		int col = Integer.parseInt(e.getEventArgs().get(1).toString());
		if (col == listProxy.getDESIGNATE_LOCATION_COLUMN())
		{
			OnDesignateLocationCheckBoxChanged(row);
		} else if (col == listProxy.getAUTO_COLUMN())
		{
			OnAutoCheckBoxChanged(row);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_Stockout_Click(ActionEvent e) throws Exception
	{

	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_Stockout_ColumClick(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_Stockout_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_Stockout_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_Stockout_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_Stockout_TabKey(ActionEvent e) throws Exception
	{
	}

	private void OnAutoCheckBoxChanged(int row)
	{
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList designateLocationList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);

		lst_Stockout.setCurrentRow(row);
		if (listProxy.getAuto())
		{
			if (listProxy.getDesignateLocation())
			{
				listProxy.setDesignateLocation(false);
				RetrievalPlankeySortableHandler.remove(designateLocationList,
						listProxy.getStockoutEntity());
			}
			RetrievalPlankeySortableHandler.insert(autoList, listProxy
					.getStockoutEntity());
		} else
		{
			RetrievalPlankeySortableHandler.remove(autoList, listProxy
					.getStockoutEntity());
		}

		session.setAttribute(DESIGNATE_LOCATION_COUNT, String
				.valueOf(designateLocationList.size()));

	}

	private void OnDesignateLocationCheckBoxChanged(int row)
	{
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList designateLocationList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);

		lst_Stockout.setCurrentRow(row);
		if (listProxy.getDesignateLocation())
		{
			// set all designate location checkboxes to unchecked state
			for (int i = 1; i < lst_Stockout.getMaxRows(); ++i)
			{
				lst_Stockout.setCurrentRow(i);
				listProxy.setDesignateLocation(false);
			}

			if (designateLocationList != null)
			{
				designateLocationList.clear();
			}

			lst_Stockout.setCurrentRow(row);
			// is auto checkbox checked ?
			if (listProxy.getAuto())
			{
				// uncheck auto checkbox
				listProxy.setAuto(false);
				RetrievalPlankeySortableHandler.remove(autoList, listProxy
						.getStockoutEntity());
			}

			// check designate location checkbox
			listProxy.setDesignateLocation(true);
			RetrievalPlankeySortableHandler.insert(designateLocationList,
					listProxy.getStockoutEntity());
		} else
		{
			RetrievalPlankeySortableHandler.remove(designateLocationList,
					listProxy.getStockoutEntity());
		}

		session.setAttribute(DESIGNATE_LOCATION_COUNT, String
				.valueOf(designateLocationList.size()));
	}

	public void page_ConfirmBack(ActionEvent e) throws Exception
	{

		if (this.getViewState().getBoolean(DIALOG_FLAG))
		{
			boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
					.booleanValue();
			if (!isExecute)
			{
				return;
			}
			message.setMsgResourceKey("7000034");
			ArrayList manuList = (ArrayList) session
					.getAttribute(DESIGNATE_LOCATION_LIST);
			ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);

			ProcessorInvoker pi = new ProcessorInvoker(message);
			if (manuList != null && manuList.size() > 0)
			{
				pi.addProcessor(new StockoutDesignateRequestProcessor(manuList,
						getUserInfo().getUserId(), pul_Subdivision
								.getSelectedValue()));
			}
			if (autoList != null && autoList.size() > 0)
			{
				pi.addProcessor(new StockoutAutoRequestProcessor(autoList,
						getUserInfo().getUserId(), pul_Subdivision
								.getSelectedValue()));
			}
			pi.run();

			lst_Stockout.clearRow();
			pageController.clear();
			InitSession();
		} else if (this.getViewState().getBoolean(DIALOG_FLAG2))
		{
			boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
					.booleanValue();
			if (!isExecute)
			{
				return;
			}
			message.setMsgResourceKey("7000034");

			String ip = getHttpRequest().getRemoteAddr();

			List dataList = new ArrayList();
			dataList.addAll((ArrayList) session
					.getAttribute(DESIGNATE_LOCATION_LIST));
			dataList.addAll((ArrayList) session.getAttribute(AUTO_LIST));

			ProcessorInvoker pi = new ProcessorInvoker(message);
			pi.addProcessor(new NormalRsvDataDeleteProcessor(ip, dataList));
			if (pi.run())
			{
				pi = new ProcessorInvoker(message);
				pi.addProcessor(new AfterRservationDataDeleteRequestProcessor());
				pi.run();
				message.setMsgResourceKey("7000016");
			}
			
			lst_Stockout.clearRow();
			pageController.clear();
			txt_StockOutDeletionPassword.setText("");
			InitSession();
		}
	}

	public void page_DlgBack(ActionEvent e) throws Exception
	{
		((DialogEvent) e).getDialogParameters();

		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList manuList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);
		if (autoList.size() <= 0 && manuList.size() <= 0)
		{
			message.setMsgResourceKey("7000015");
			return;
		}
		setConfirm("YKK-LBL-SetConfirm");
		getViewState().setBoolean(DIALOG_FLAG, true);
	}

	/**
	 * Refered before calling each control event.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Initialize(ActionEvent e) throws Exception
	{
		String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
		if (menuparam != null)
		{
			// #CM37828
			// fetch parameter
			String title = CollectionUtils.getMenuParam(0, menuparam);
			String functionID = CollectionUtils.getMenuParam(1, menuparam);
			String menuID = CollectionUtils.getMenuParam(2, menuparam);
			// #CM37829
			// save to viewstate
			this.getViewState().setString(M_TITLE_KEY, title);
			this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
			this.getViewState().setString(M_MENUID_KEY, menuID);
			// #CM37830
			// set screen name
			// lbl_SettingName.setResourceKey(title);
		}
	}

	/**
	 * Initializes the screen.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Load(ActionEvent e) throws Exception
	{
//		this.pul_Subdivision.setEnabled(false);
		InitSession();

		Connection conn = null;

		try
		{
			conn = ConnectionManager.getConnection();
			ASRSInfoCentre centre = new ASRSInfoCentre(conn);
			String roleId = centre.getRoleIdByUserId(getUserInfo().getUserId());

			btn_Delete.setVisible(roleId.equals("1"));
			txt_StockOutDeletionPassword.setVisible(roleId.equals("1"));
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} finally
		{
			if (conn != null)
			{
				conn.close();
			}
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Low_First(ActionEvent e) throws Exception
	{
		try
		{
			pageController.turnToFirstPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Low_Last(ActionEvent e) throws Exception
	{
		try
		{
			pageController.turnToLastPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Low_Next(ActionEvent e) throws Exception
	{
		try
		{
			pageController.turnToNextPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Low_Prev(ActionEvent e) throws Exception
	{
		try
		{
			pageController.turnToPreviousPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Up_First(ActionEvent e)
	{
		try
		{
			pageController.turnToFirstPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Up_Last(ActionEvent e)
	{
		try
		{
			pageController.turnToLastPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Up_Next(ActionEvent e)
	{
		try
		{
			pageController.turnToNextPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pgr_Up_Prev(ActionEvent e)
	{
		try
		{
			pageController.turnToPreviousPage();
		} catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		} catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pul_StockoutStation1_Change(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pul_StockoutStation1_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pul_StockoutStation2_Change(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pul_StockoutStation2_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_AssemblyLineWorkingProcedu_Click(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_AssemblyLineWorkingProcedu_Server(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_FinalProcedure_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_FinalProcedure_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_ItemNo_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_ItemNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_OtherProcedure_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_OtherProcedure_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_WhenNextWorkBegin_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_WhenNextWorkBegin_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_WhenThisWorkFinishInPlan_Click(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_WhenThisWorkFinishInPlan_Server(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Line_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Line_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Line_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Line_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Line_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Line_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LineDivision_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LineDivision_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LineDivision_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Section_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Section_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Section_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Section_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Section_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_Section_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_AutoComplete(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_EnterKey(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_InputComplete(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_Server(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_TabKey(ActionEvent e)
			throws Exception
	{
	}

	private void ValidateCheck() throws ValidateException
	{
		if (rdo_OtherProcedure.getChecked())
		{
			setFocus(txt_Section);
			txt_Section.validate();
		} else if (rdo_AssemblyLineWorkingProcedu.getChecked())
		{
			setFocus(txt_LineDivision);
			txt_LineDivision.validate();
		} else if (rdo_FinalProcedure.getChecked())
		{
			setFocus(pul_StockoutStation1);
			pul_StockoutStation1.validate();
		}
		setFocus(null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_Subdivision_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pul_Subdivision_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void pul_Subdivision_Change(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectAll_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectAll_Click(ActionEvent e) throws Exception
	{
		for (int i = 1; i < this.lst_Stockout.getMaxRows(); i++)
		{
			lst_Stockout.setCurrentRow(i);

			if (lst_Stockout.getCellEnabled(listProxy.getAUTO_COLUMN()) == null
					|| lst_Stockout.getCellEnabled(listProxy.getAUTO_COLUMN())
							.equals("true"))
			{
				listProxy.setAuto(true);
				OnAutoCheckBoxChanged(i);
			}
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_UnselectAll_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_UnselectAll_Click(ActionEvent e) throws Exception
	{
		for (int i = 1; i < this.lst_Stockout.getMaxRows(); i++)
		{
			lst_Stockout.setCurrentRow(i);

			if (lst_Stockout.getCellEnabled(listProxy.getAUTO_COLUMN()) == null
					|| lst_Stockout.getCellEnabled(listProxy.getAUTO_COLUMN())
							.equals("true"))
			{
				listProxy.setAuto(false);
				listProxy.setDesignateLocation(false);
				OnAutoCheckBoxChanged(i);
				OnDesignateLocationCheckBoxChanged(i);
			}
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void chk_DisplayFinishedRetrieval_Server(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void chk_DisplayFinishedRetrieval_Change(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_RetrievalNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_RetrievalNo_Click(ActionEvent e) throws Exception
	{
	}

}
// end of class
