package jp.co.daifuku.wms.YkkGMAX.fileexporter;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import jp.co.daifuku.bluedog.ui.control.Page;
import jp.co.daifuku.wms.YkkGMAX.Entities.LocationStorageInfoEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.LocationStorageInfoHead;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;

public class LocationStorageInfoCSV implements IExportable
{
    private final String LOCATION_STORAGE_INFO_HEAD = "LOCATION_STORAGE_INFO_HEAD";

    private final Page page;

    public LocationStorageInfoCSV(Page page)
    {
	this.page = page;
    }

    public int getCount() throws YKKSQLException, YKKDBException
    {
	Connection conn = null;
	int count = 0;
	ASRSInfoCentre centre = null;
	try
	{
	    conn = ConnectionManager.getConnection();
	    centre = new ASRSInfoCentre(conn);
	    count = centre
		    .getLocationStorageInfoCount(getLocationStorageInfoHead());
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException e)
		{
		    DebugPrinter.print(DebugLevel.ERROR, e.getMessage());
		    YKKDBException ex = new YKKDBException();
		    ex.setResourceKey("7200002");
		    throw ex;
		}
	    }
	}
	return count;
    }

    public String getHead()
    {
	String head = "货位,物料编号,品名,颜色,生产票号,计量报告状态,箱子编号,在库数,入库时间";
	return head;
    }

    public String getLine(Object object)
    {
	LocationStorageInfoEntity entity = (LocationStorageInfoEntity) object;

	String line = "";
	if (!StringUtils.IsNullOrEmpty(entity.getLocationStatus()))
	{
	    line = StringUtils.formatLocationNoFromDBToPage(entity
		    .getLocationNo())
		    + ":" + entity.getLocationStatus() + ",";
	}
	else
	{
	    line = StringUtils.formatLocationNoFromDBToPage(entity
		    .getLocationNo())
		    + ",";
	}

	line += entity.getItemCode() + ",";
	line += entity.getItemName1() + ",";
	line += entity.getColor() + ",";
	line += entity.getTicketNo() + ",";
	line += entity.getWeightReportFlag() + ",";
	line += entity.getBucketNo() + ",";
	line += String.valueOf(entity.getInstockCount()) + ",";
	line += StringUtils.formatDateFromDBToPage(entity.getStockinDateTime());

	return line;
    }

    public List getList() throws YKKSQLException, YKKDBException
    {
	Connection conn = null;
	List locationStorageInfoList = null;
	ASRSInfoCentre centre = null;
	try
	{
	    conn = ConnectionManager.getConnection();
	    centre = new ASRSInfoCentre(conn);
	    locationStorageInfoList = centre
		    .getLocationStorageInfoList(getLocationStorageInfoHead());
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException e)
		{
		    DebugPrinter.print(DebugLevel.ERROR, e.getMessage());
		    YKKDBException ex = new YKKDBException();
		    ex.setResourceKey("7200002");
		    throw ex;
		}
	    }
	}
	return locationStorageInfoList;
    }

    public LocationStorageInfoHead getLocationStorageInfoHead()
    {
	return (LocationStorageInfoHead) page.getSession().getAttribute(
		LOCATION_STORAGE_INFO_HEAD);
    }

}
