// $Id: ForbidLocationSettingBusiness.java,v 1.1 2007/12/13 06:25:09 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Maintenance;

import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.PulldownManager.PulldownManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.1 $, $Date: 2007/12/13 06:25:09 $
 * @author $Author: administrator $
 */
public class ForbidLocationSettingBusiness extends ForbidLocationSetting
	implements WMSConstants
{
    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    private final String DIALOG_FLAG = "DIALOG_FLAG";

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Click(ActionEvent e) throws Exception
    {
	ClearControls();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Server(ActionEvent e) throws Exception
    {
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Help_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Click(ActionEvent e) throws Exception
    {
	btn_Show_Click(null);
	ValidateCheck1();
	setConfirm("YKK-LBL-SetConfirm");
	getViewState().setBoolean(DIALOG_FLAG, true);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show_Click(ActionEvent e) throws Exception
    {
	ValidateCheck2();

	session.setAttribute("BankNo", this.pul_Bank.getSelectedValue());
	String xPoint = this.txt_BasePoint.getText().substring(0, 2);
	int x = Integer.parseInt(xPoint);
	if (x > 66 - 33 + 1)
	{
	    x = 66 - 33 + 1;
	}
	else if (x < 1)
	{
	    x = 1;
	}

	String yPoint = this.txt_BasePoint.getText().substring(3, 5);
	int y = Integer.parseInt(yPoint);
	if (y > 79 - 21 + 1)
	{
	    y = 79 - 21 + 1;
	}
	else if (y < 1)
	{
	    y = 1;
	}
	session.setAttribute("StartBay", String.valueOf(x));
	session.setAttribute("StartLevel", String.valueOf(y));
	DecimalFormat df = new DecimalFormat("00");
	this.txt_BasePoint.setText(df.format(x) + "-" + df.format(y));
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show1_Click(ActionEvent e) throws Exception
    {
	btn_Show_Click(null);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show1_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Click(ActionEvent e) throws Exception
    {
	forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
		.getString(M_MENUID_KEY)));
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_RangeSet_Change(ActionEvent e) throws Exception
    {
	txt_LocationNoTo.setReadOnly(!chk_RangeSet.getChecked());
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_RangeSet_Server(ActionEvent e) throws Exception
    {
    }

    private void ClearControls()
    {
	// pul_Bank.setSelectedIndex(0);
	txt_LocationNoFrom.setText("");
	txt_LocationNoTo.setText("");
	rdo_ForbidLocation.setChecked(true);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Bank_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_BasePoint_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_BayLevel_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_LocationNo_Server(ActionEvent e) throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_SettingName_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Status_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_to_Server(ActionEvent e) throws Exception
    {
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {

	if (!this.getViewState().getBoolean(DIALOG_FLAG))
	{
	    return;
	}
	boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
		.booleanValue();
	if (!isExecute)
	{
	    return;
	}
	message.setMsgResourceKey("7000034");
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    String[] tokens = txt_LocationNoFrom.getText().split("-");
	    int fromBayNo = Integer.parseInt(tokens[0]);
	    int fromLevelNo = Integer.parseInt(tokens[1]);

	    int toBayNo = 99;
	    int toLevelNo = 99;
	    if (chk_RangeSet.getChecked())
	    {
		tokens = txt_LocationNoTo.getText().split("-");
		if (tokens.length == 2)
		{
		    toBayNo = Integer.parseInt(tokens[0]);
		    toLevelNo = Integer.parseInt(tokens[1]);
		}
	    }

	    if (fromBayNo > toBayNo)
	    {
		int tempBayNo = fromBayNo;
		fromBayNo = toBayNo;
		toBayNo = tempBayNo;
	    }

	    if (fromLevelNo > toLevelNo)
	    {
		int tempLevelNo = fromLevelNo;
		fromLevelNo = toLevelNo;
		toLevelNo = tempLevelNo;
	    }

	    centre.forbidLocationSetting(pul_Bank.getSelectedValue(), String
		    .valueOf(fromBayNo), String.valueOf(toBayNo), String
		    .valueOf(fromLevelNo), String.valueOf(toLevelNo),
		    chk_RangeSet.getChecked(), rdo_ForbidLocation.getChecked());
	    conn.commit();
	    message.setMsgResourceKey("7400002");
	    // session.setAttribute("SelectedIndex", new Integer(pul_Bank
	    // .getSelectedIndex()));
	    ClearControls();
	    btn_Show_Click(null);
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
	String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
	if (menuparam != null)
	{
	    // #CM37828
	    // fetch parameter
	    String title = CollectionUtils.getMenuParam(0, menuparam);
	    String functionID = CollectionUtils.getMenuParam(1, menuparam);
	    String menuID = CollectionUtils.getMenuParam(2, menuparam);
	    // #CM37829
	    // save to viewstate
	    this.getViewState().setString(M_TITLE_KEY, title);
	    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
	    this.getViewState().setString(M_MENUID_KEY, menuID);
	    // #CM37830
	    // set screen name
	    // lbl_SettingName.setResourceKey(title);
	}
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	txt_LocationNoTo.setReadOnly(true);
	txt_BasePoint.setText("01-01");
	try
	{
	    PulldownManager.FillBankPullDown(pul_Bank);
	    // Integer selectedIndex = (Integer) session
	    // .getAttribute("SelectedIndex");
	    // if (selectedIndex == null)
	    // {
	    // selectedIndex = new Integer(0);
	    // }
	    // pul_Bank.setSelectedIndex(selectedIndex.intValue());
	    btn_Show_Click(null);
	    // pul_Bank.setSelectedItem(arg0);

	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pul_Bank_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pul_Bank_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ForbidLocation_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ForbidLocation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_UsefulLocation_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_UsefulLocation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void tab_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BasePoint_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BasePoint_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BasePoint_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNoFrom_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNoFrom_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNoFrom_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNoTo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNoTo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNoTo_TabKey(ActionEvent e) throws Exception
    {
    }

    private void ValidateCheck1() throws ValidateException
    {
	setFocus(txt_LocationNoFrom);
	txt_LocationNoFrom.validate();
	setFocus(null);

    }

    private void ValidateCheck2() throws ValidateException
    {
	setFocus(txt_BasePoint);
	txt_BasePoint.validate();
	setFocus(null);
    }

}
// end of class
