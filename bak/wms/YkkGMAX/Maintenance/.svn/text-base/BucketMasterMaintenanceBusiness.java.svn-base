// $Id: BucketMasterMaintenanceBusiness.java,v 1.3 2008/01/02 02:35:12 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Maintenance;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.BucketViewEntity;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.DBFlags;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.3 $, $Date: 2008/01/02 02:35:12 $
 * @author $Author: administrator $
 */
public class BucketMasterMaintenanceBusiness extends BucketMasterMaintenance
		implements WMSConstants
{
	// Class fields --------------------------------------------------

	// Class variables -----------------------------------------------

	// Class method --------------------------------------------------

	// Constructors --------------------------------------------------

	// Public methods ------------------------------------------------

	private final String MAINTENANCE_MODE = "MAINTENANCE_MODE";
	private final String BUCKET_NO = "BUCKET_NO";
	private final String DIALOG_FLAG = "DIALOG_FLAG";

	/**
	 * Initializes the screen.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Load(ActionEvent e) throws Exception
	{
		rdo_Short.setChecked(true);
		InitSession();
	}

	private void InitSession()
	{
		session.setAttribute(MAINTENANCE_MODE, null);

		session.setAttribute(BUCKET_NO, null);
	}

	/**
	 * Refered before calling each control event.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Initialize(ActionEvent e) throws Exception
	{
		String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
		if (menuparam != null)
		{
		    // #CM37828
		    // fetch parameter
		    String title = CollectionUtils.getMenuParam(0, menuparam);
		    String functionID = CollectionUtils.getMenuParam(1, menuparam);
		    String menuID = CollectionUtils.getMenuParam(2, menuparam);
		    // #CM37829
		    // save to viewstate
		    this.getViewState().setString(M_TITLE_KEY, title);
		    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
		    this.getViewState().setString(M_MENUID_KEY, menuID);
		    // #CM37830
		    // set screen name
		    // lbl_SettingName.setResourceKey(title);
		}
	}

	// Package methods -----------------------------------------------

	// Protected methods ---------------------------------------------

	// Private methods -----------------------------------------------

	// Event handler methods -----------------------------------------
	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_SettingName_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Help_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void tab_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_ToMenu_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_ToMenu_Click(ActionEvent e) throws Exception
	{
		forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
				.getString(M_MENUID_KEY)));
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_BucketNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_BucketNoBrowse_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_BucketNoBrowse_Click(ActionEvent e) throws Exception
	{
		session.setAttribute(BUCKET_NO, txt_BucketNo.getText());

		redirect("/YkkGMAX/Popup/BucketView.do", null, "/progress.do");
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Add_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Add_Click(ActionEvent e) throws Exception
	{
		ValidateCheck1();
		setAddMode();
		ClearControls();
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getConnection();

			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			if (centre.getBucketMasterList(txt_BucketNo.getText()).size() > 0)
			{
				message.setMsgResourceKey("7000002");
				return;
			}
			ClearControls();
			txt_BucketNo_RO.setText(txt_BucketNo.getText());

		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqlex)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}

	private void ValidateCheck1() throws ValidateException
	{
		setFocus(txt_BucketNo);
		txt_BucketNo.validate();
		setFocus(null);

	}

	private void ValidateCheck2() throws ValidateException
	{
		txt_BucketNo_RO.validate();
		setFocus(txt_BagWeight);
		txt_BagWeight.validate();
		setFocus(null);
	}

	private void setDeleteMode()
	{
		txt_BagWeight.setReadOnly(true);
		txt_LastUseDate.setReadOnly(true);
		txt_LastUseTime.setReadOnly(true);

		rdo_Tall.setEnabled(false);

		rdo_Short.setEnabled(false);

		session.setAttribute(MAINTENANCE_MODE, "DELETE");
	}

	private void setAddMode()
	{
		txt_BagWeight.setReadOnly(false);
		txt_LastUseDate.setReadOnly(false);
		txt_LastUseTime.setReadOnly(false);

		rdo_Tall.setEnabled(true);

		rdo_Short.setEnabled(true);

		session.setAttribute(MAINTENANCE_MODE, "ADD");
	}

	private void setModiMode()
	{
		txt_BagWeight.setReadOnly(false);
		txt_LastUseDate.setReadOnly(false);
		txt_LastUseTime.setReadOnly(false);

		rdo_Tall.setEnabled(true);

		rdo_Short.setEnabled(true);

		session.setAttribute(MAINTENANCE_MODE, "MODIFY");
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Modify_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Modify_Click(ActionEvent e) throws Exception
	{
		ValidateCheck1();
		setModiMode();
		ClearControls();
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getConnection();

			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			List bucketMasterList = centre.getBucketMasterList(txt_BucketNo
					.getText());
			if (bucketMasterList.size() <= 0)
			{
				message.setMsgResourceKey("7000003");
				return;
			}

			BucketViewEntity entity = (BucketViewEntity) bucketMasterList
					.get(0);
			ClearControls();
			txt_BucketNo_RO.setText(entity.getBucketNo());
			txt_BagWeight.setText(entity.getPackingWeight().toString());
			txt_LastUseDate.setText(StringUtils
					.formatDateFromDBToPage(StringUtils
							.SplitDateFromDateTime(entity
									.getLastUpdateDateTime())));
			txt_LastUseTime.setText(StringUtils
					.formatTimeFromDBToPage(StringUtils
							.SplitTimeFromDateTime(entity
									.getLastUpdateDateTime())));
			if (entity.getHightFlag().equals(DBFlags.HightFlag.HIGH))
			{
				rdo_Tall.setChecked(true);
			}
			else
			{
				rdo_Short.setChecked(true);
			}
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqlex)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Delete_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Delete_Click(ActionEvent e) throws Exception
	{
		ValidateCheck1();
		setDeleteMode();
		ClearControls();
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getConnection();

			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			List bucketMasterList = centre.getBucketMasterList(txt_BucketNo
					.getText());
			if (bucketMasterList.size() <= 0)
			{
				message.setMsgResourceKey("7000003");
				return;
			}
			
			int count = centre.getBucketInstockCount(txt_BucketNo
					.getText());
			
			if(count > 0)
			{
				message.setMsgResourceKey("7000044");
				return;
			}

			BucketViewEntity entity = (BucketViewEntity) bucketMasterList
					.get(0);
			ClearControls();
			txt_BucketNo_RO.setText(entity.getBucketNo());
			txt_BagWeight.setText(String.valueOf(entity.getPackingWeight()));
			txt_LastUseDate.setText(StringUtils
					.formatDateFromDBToPage(StringUtils
							.SplitDateFromDateTime(entity
									.getLastUpdateDateTime())));
			txt_LastUseTime.setText(StringUtils
					.formatTimeFromDBToPage(StringUtils
							.SplitTimeFromDateTime(entity
									.getLastUpdateDateTime())));
			if (entity.getHightFlag().equals(DBFlags.HightFlag.HIGH))
			{
				rdo_Tall.setChecked(true);
			}
			else
			{
				rdo_Short.setChecked(true);
			}
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqlex)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_BucketNo_RO_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_RO_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_RO_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_RO_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_RO_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_RO_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BucketNo_RO_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_BagWeight_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BagWeight_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BagWeight_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_BagWeight_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_TallShort_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_Tall_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_Tall_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_Short_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void rdo_Short_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_LastUseDateTime_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LastUseDate_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LastUseDate_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LastUseDate_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LastUseTime_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LastUseTime_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_LastUseTime_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Click(ActionEvent e) throws Exception
	{
		ValidateCheck2();
		setConfirm("YKK-LBL-SetConfirm");
		getViewState().setBoolean(DIALOG_FLAG, true);

	}

	private BucketViewEntity getBucketViewEntity()
	{
		BucketViewEntity entity = new BucketViewEntity();

		entity.setBucketNo(txt_BucketNo_RO.getText());
		try
		{
			entity.setPackingWeight(new BigDecimal(txt_BagWeight.getText()));
		}
		catch(Exception ex)
		{
			entity.setPackingWeight(new BigDecimal(0));
		}

		if (StringUtils.IsNullOrEmpty(txt_LastUseDate.getText())
				&& StringUtils.IsNullOrEmpty(txt_LastUseTime.getText()))
		{
			entity.setLastUpdateDateTime(StringUtils.getCurrentDate()
					+ StringUtils.getCurrentTime());
		}
		else if (StringUtils.IsNullOrEmpty(txt_LastUseDate.getText()))
		{
			entity.setLastUpdateDateTime(StringUtils.getCurrentDate()
					+ StringUtils.formatTimeFormPageToDB(txt_LastUseTime
							.getText()));
		}
		else if (StringUtils.IsNullOrEmpty(txt_LastUseTime.getText()))
		{
			entity.setLastUpdateDateTime(StringUtils
					.formatDateFromPageToDB(txt_LastUseDate.getText())
					+ StringUtils.getCurrentTime());
		}
		else
		{
			entity.setLastUpdateDateTime(StringUtils
					.formatDateFromPageToDB(txt_LastUseDate.getText())
					+ StringUtils.formatTimeFormPageToDB(txt_LastUseTime
							.getText()));
		}
		if (rdo_Tall.getChecked())
		{
			entity.setHightFlag(DBFlags.HightFlag.HIGH);
		}
		else
		{
			entity.setHightFlag(DBFlags.HightFlag.LOW);
		}
		return entity;
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Clear_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Clear_Click(ActionEvent e) throws Exception
	{
		ClearControls();
	}

	private void ClearControls()
	{
		txt_BucketNo_RO.setText("");
		txt_BagWeight.setText("");
		txt_LastUseDate.setText("");
		txt_LastUseTime.setText("");
		rdo_Short.setChecked(true);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_DealDivision_Server(ActionEvent e) throws Exception
	{
	}

	public void page_DlgBack(ActionEvent e) throws Exception
	{
		((DialogEvent) e).getDialogParameters();

		if (session.getAttribute(BUCKET_NO) != null)
		{
			txt_BucketNo.setText((String) session.getAttribute(BUCKET_NO));

			session.setAttribute(BUCKET_NO, null);
		}
	}

	public void page_ConfirmBack(ActionEvent e) throws Exception
	{
		if (!this.getViewState().getBoolean(DIALOG_FLAG))
		{
			return;
		}
		boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
				.booleanValue();
		if (!isExecute)
		{
			return;
		}
		message.setMsgResourceKey("7000034");
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getConnection();

			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			String maintenanceMode = (String) session
					.getAttribute(MAINTENANCE_MODE);

			if (maintenanceMode.equals("ADD"))
			{
				centre.addBucket(getBucketViewEntity());
			}
			else if (maintenanceMode.equals("MODIFY"))
			{
				centre.modiBucket(getBucketViewEntity());
			}
			else if (maintenanceMode.equals("DELETE"))
			{
				
				int count = centre.getBucketInstockCount(txt_BucketNo_RO
						.getText());
				
				if(count > 0)
				{
					message.setMsgResourceKey("7000044");
					return;
				}
				centre.deleteBucket(getBucketViewEntity());
			}
			message.setMsgResourceKey("7400002");
			conn.commit();
			ClearControls();
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
			try
			{
				if (conn != null)
				{
					conn.rollback();
				}
			}
			catch (SQLException ex)
			{
				DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
				message.setMsgResourceKey("7200002");
			}
		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
			try
			{
				if (conn != null)
				{
					conn.rollback();
				}
			}
			catch (SQLException ex)
			{
				DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
				message.setMsgResourceKey("7200002");
			}
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqlex)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Star1_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Star2_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Date_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Time_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Kg_Server(ActionEvent e) throws Exception
	{
	}


}
// end of class
