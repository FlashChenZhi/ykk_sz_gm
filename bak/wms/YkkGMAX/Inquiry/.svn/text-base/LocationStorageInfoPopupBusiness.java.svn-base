// $Id: LocationStorageInfoPopupBusiness.java,v 1.1 2007/12/13 06:25:09 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Inquiry;

import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.ForwardParameters;
import jp.co.daifuku.common.MessageResource;
import jp.co.daifuku.wms.YkkGMAX.DBHandler.DBHandler;
import jp.co.daifuku.wms.YkkGMAX.Entities.LocationStorageInfoEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.LocationStorageInfoHead;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.LocationStorageInfoListProxy;
import jp.co.daifuku.wms.YkkGMAX.PageController.LocationStorageInfoPager;
import jp.co.daifuku.wms.YkkGMAX.PageController.PageController;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.fileexporter.CSVGenerator;
import jp.co.daifuku.wms.YkkGMAX.fileexporter.LocationStorageInfoCSV;
import jp.co.daifuku.wms.base.common.WMSConstants;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.1 $, $Date: 2007/12/13 06:25:09 $
 * @author $Author: administrator $
 */
public class LocationStorageInfoPopupBusiness extends LocationStorageInfoPopup
	implements WMSConstants
{
    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    private final String DIALOG_FLAG = "DIALOG_FLAG";
    private final String LOCATION_STORAGE_INFO_HEAD = "LOCATION_STORAGE_INFO_HEAD";
    private final LocationStorageInfoListProxy listProxy = new LocationStorageInfoListProxy(
	    lst_LocationStorInfoPopupHead, lst_LocationStorageInfoPopup);
    private final PageController pageController = new PageController(
	    new LocationStorageInfoPager(this, pgr_Up),
	    new LocationStorageInfoPager(this, pgr_Low), message);

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Low_Click(ActionEvent e) throws Exception
    {
	this.closeWindow();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Low_Server(ActionEvent e) throws Exception
    {
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Up_Click(ActionEvent e) throws Exception
    {
	this.closeWindow();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Up_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_CSV_Click(ActionEvent e) throws Exception
    {
	String root = getServletContext().getRealPath("/csv");
	CSVGenerator generator = new CSVGenerator(new LocationStorageInfoCSV(
		this), root);
	try
	{
	    String path = generator.generateFile(message);
	    if (path.equals(""))
	    {
		return;
	    }
	    viewState.setString("file", path);
	    addOnloadScript("slb_Download.click();");
	}
	catch (Exception ex)
	{
	    DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
	    message.setMsgResourceKey("7500001");
	    List paramList = new ArrayList();
	    paramList.add(ex.getMessage());
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_CSV_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Print_Click(ActionEvent e) throws Exception
    {
	LocationStorageInfoHead head = (LocationStorageInfoHead) session
		.getAttribute(LOCATION_STORAGE_INFO_HEAD);
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();
	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    int count = centre.getLocationStorageInfoCount(head);

	    setConfirm("YKK-LBL-PrintConfirm" + MessageResource.DELIM
		    + String.valueOf(count));
	    getViewState().setBoolean(DIALOG_FLAG, true);
	}

	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqle)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Print_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_Change(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_Click(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_ColumClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorageInfoPopup_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_Change(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_Click(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_ColumClick(ActionEvent e)
	    throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_LocationStorInfoPopupHead_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {

	if (!this.getViewState().getBoolean(DIALOG_FLAG))
	{
	    return;
	}
	boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
		.booleanValue();
	if (!isExecute)
	{
	    return;
	}
	message.setMsgResourceKey("7000034");
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();
	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    String printerName = centre.getPrinterName(getHttpRequest()
		    .getRemoteAddr());
	    String listKey = centre.generateLabelKey();

	    LocationStorageInfoHead head = (LocationStorageInfoHead) session
		    .getAttribute(LOCATION_STORAGE_INFO_HEAD);

	    String locationStatus = "";
	    for (int i = 0; i < head.getLocationStatus().size(); i++)
	    {
		locationStatus += (String) head.getLocationStatus().get(i)
			+ "、";
	    }
	    if (locationStatus.length() > 0)
	    {
		locationStatus = locationStatus.substring(0, locationStatus
			.length() - 1);
	    }
	    String weightReportFlags = "";
	    for (int i = 0; i < head.getWeightReportFlag().size(); i++)
	    {
		weightReportFlags += (String) head.getWeightReportFlag().get(i)
			+ "、";
	    }
	    if (weightReportFlags.length() > 0)
	    {
		weightReportFlags = weightReportFlags.substring(0,
			weightReportFlags.length() - 1);
	    }
	    String locationNoRange = "";
	    if (head.isRangeSet())
	    {
		locationNoRange = StringUtils.formatLocationNoFromDBToPage(head
			.getLocationNoFrom())
			+ "～"
			+ StringUtils.formatLocationNoFromDBToPage(head
				.getLocationNoTo());
	    }
	    else
	    {
		locationNoRange = StringUtils.formatLocationNoFromDBToPage(head
			.getLocationNoFrom());
	    }

	    String sqlString = "INSERT INTO FNPRINTHEAD (listkey,proc_flag,printer_name,listtype,order_flag,range1,range2,range3,range4)VALUES("
		    + StringUtils.surroundWithSingleQuotes(listKey)
		    + ","
		    + StringUtils.surroundWithSingleQuotes("0")
		    + ","
		    + StringUtils.surroundWithSingleQuotes(printerName)
		    + ","
		    + StringUtils.surroundWithSingleQuotes("3")
		    + ","
		    + StringUtils.surroundWithSingleQuotes("0")
		    + ","
		    + StringUtils.surroundWithSingleQuotes(head.getDepo())
		    + ","
		    + StringUtils.surroundWithSingleQuotes(StringUtils
			    .formatDateAndTimeFromDBToPage(locationStatus))
		    + ","
		    + StringUtils.surroundWithSingleQuotes(locationNoRange)
		    + ","
		    + StringUtils.surroundWithSingleQuotes(weightReportFlags)
		    + ")";
	    DBHandler handler = new DBHandler(conn);
	    handler.executeUpdate(sqlString, true);

	    List entityList = centre.getLocationStorageInfoList(head);

	    for (int i = 0; i < entityList.size(); i++)
	    {
		LocationStorageInfoEntity entity = (LocationStorageInfoEntity) entityList
			.get(i);

		sqlString = "INSERT INTO FNPRINTBODY (listKey,range1,range2,range3,range4,range5,range6,range7,range8,range9)VALUES("
			+ StringUtils.surroundWithSingleQuotes(listKey)
			+ ","
			+ StringUtils.surroundWithSingleQuotes(StringUtils
				.formatLocationNoFromDBToPage(entity
					.getLocationNo())
				+ ":" + entity.getLocationStatus())
			+ ","
			+ StringUtils.surroundWithSingleQuotes(entity
				.getItemCode())
			+ ","
			+ StringUtils.surroundWithSingleQuotes(entity
				.getItemName1()
				+ StringUtils.nextRow
				+ entity.getItemName2()
				+ StringUtils.nextRow + entity.getItemName3())
			+ ","
			+ StringUtils.surroundWithSingleQuotes(entity
				.getColor())
			+ ","
			+ StringUtils.surroundWithSingleQuotes(entity
				.getTicketNo())
			+ ","
			+ StringUtils.surroundWithSingleQuotes(entity
				.getBucketNo())
			+ ","
			+ StringUtils.surroundWithSingleQuotes(DecimalFormat
				.getIntegerInstance().format(
					entity.getInstockCount()))
			+ ","
			+ StringUtils.surroundWithSingleQuotes(StringUtils
				.formatDateAndTimeFromDBToPage(entity
					.getStockinDateTime()))
			+ ","
			+ StringUtils.surroundWithSingleQuotes(entity
				.getWeightReportFlag()) + ")";
		handler = new DBHandler(conn);
		handler.executeUpdate(sqlString, true);

	    }
	    message.setMsgResourceKey("7000017");
	    conn.commit();
	}

	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    try
	    {
		if (conn != null)
		{
		    conn.rollback();
		}
	    }
	    catch (SQLException ex)
	    {
		DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
		message.setMsgResourceKey("7200002");
	    }
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    try
	    {
		if (conn != null)
		{
		    conn.rollback();
		}
	    }
	    catch (SQLException ex)
	    {
		DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
		message.setMsgResourceKey("7200002");
	    }
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqle)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	LocationStorageInfoHead head = (LocationStorageInfoHead) session
		.getAttribute(LOCATION_STORAGE_INFO_HEAD);

	listProxy.setHeadValue(head);

	try
	{
	    pageController.init();
	    pageController.setCountPerPage(30);
	    pageController.turnToFirstPage();
	    if (pgr_Up.getMax() == 0)
	    {
		btn_CSV.setEnabled(false);
		btn_Print.setEnabled(false);
	    }

	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_First(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToFirstPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Last(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToLastPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Next(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToNextPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Prev(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToPreviousPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_First(ActionEvent e)
    {
	try
	{
	    pageController.turnToFirstPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Last(ActionEvent e)
    {
	try
	{
	    pageController.turnToLastPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Next(ActionEvent e)
    {
	try
	{
	    pageController.turnToNextPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Prev(ActionEvent e)
    {
	try
	{
	    pageController.turnToPreviousPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void slb_Download_Click(ActionEvent e) throws Exception
    {
	String path = viewState.getString("file");

	ForwardParameters param = new ForwardParameters();
	param.addParameter("file", path);

	redirect("/jsp/SheetDownLoadDummy.jsp", param);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void slb_Download_Server(ActionEvent e) throws Exception
    {
    }
}
// end of class
