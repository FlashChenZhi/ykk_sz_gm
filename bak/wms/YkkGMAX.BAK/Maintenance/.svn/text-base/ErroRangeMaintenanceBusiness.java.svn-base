// $Id: ErroRangeMaintenanceBusiness.java,v 1.1 2007/12/13 06:25:09 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Maintenance;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.ErrorRangeEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.TerminalViewEntity;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.1 $, $Date: 2007/12/13 06:25:09 $
 * @author $Author: administrator $
 */
public class ErroRangeMaintenanceBusiness extends ErroRangeMaintenance
	implements WMSConstants
{
    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    private final String FNRANGE_ENTITY = "FNRANGE_ENTITY";

    private final String MAINTENANCE_MODE = "MAINTENANCE_MODE";

    private final String DIALOG_FLAG = "DIALOG_FLAG";

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Add_Click(ActionEvent e) throws Exception
    {
	ValidateCheck();
	setAddMode();
	ClearControls();
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    int count = centre.getErrorRangeCount(txt_TerminalNo.getText(),
		    txt_FormerProduceLine1.getText(), txt_FormerProduceLine2
			    .getText(), rdo_Stockin.getChecked());

	    if (count == 0)
	    {
		txt_TerminalNo_RO.setText(txt_TerminalNo.getText());
		txt_FormerProduceLine1_RO.setText(txt_FormerProduceLine1
			.getText());
		txt_FormerProduceLine2_RO.setText(txt_FormerProduceLine2
			.getText());
		txt_UnitMaxErro.setInt(100);
		txt_UnitMinErro.setInt(100);
		txt_StockinMaxErro.setInt(100);
		txt_StockinMinErro.setInt(100);
		txt_StockoutMaxErro.setInt(100);
		txt_StockoutMinErro.setInt(100);
	    }
	    else
	    {
		message.setMsgResourceKey("7000037");
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Add_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Click(ActionEvent e) throws Exception
    {
	ClearControls();
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Delete_Click(ActionEvent e) throws Exception
    {
	ValidateCheck();
	setDeleteMode();
	ClearControls();
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    ErrorRangeEntity entity = centre.getErrorRange(txt_TerminalNo
		    .getText(), txt_FormerProduceLine1.getText(),
		    txt_FormerProduceLine2.getText(), rdo_Stockin.getChecked());

	    if (entity != null)
	    {
		txt_TerminalNo_RO.setText(txt_TerminalNo.getText());
		txt_FormerProduceLine1_RO.setText(txt_FormerProduceLine1
			.getText());
		txt_FormerProduceLine2_RO.setText(txt_FormerProduceLine2
			.getText());
		txt_UnitMaxErro.setText(entity.getUnitWeightUpper().toString());
		txt_UnitMinErro.setText(entity.getUnitWeightLower().toString());
		txt_StockinMaxErro.setText(entity.getStorageUpper().toString());
		txt_StockinMinErro.setText(entity.getStorageLower().toString());
		txt_StockoutMaxErro.setText(entity.getShipUpper().toString());
		txt_StockoutMinErro.setText(entity.getShipLower().toString());
	    }
	    else
	    {
		message.setMsgResourceKey("7000036");
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Delete_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Help_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Modify_Click(ActionEvent e) throws Exception
    {
	ValidateCheck();
	setModifyMode();
	ClearControls();
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    ErrorRangeEntity entity = centre.getErrorRange(txt_TerminalNo
		    .getText(), txt_FormerProduceLine1.getText(),
		    txt_FormerProduceLine2.getText(), rdo_Stockin.getChecked());

	    if (entity != null)
	    {
		txt_TerminalNo_RO.setText(txt_TerminalNo.getText());
		txt_FormerProduceLine1_RO.setText(txt_FormerProduceLine1
			.getText());
		txt_FormerProduceLine2_RO.setText(txt_FormerProduceLine2
			.getText());
		txt_UnitMaxErro.setText(entity.getUnitWeightUpper().toString());
		txt_UnitMinErro.setText(entity.getUnitWeightLower().toString());
		txt_StockinMaxErro.setText(entity.getStorageUpper().toString());
		txt_StockinMinErro.setText(entity.getStorageLower().toString());
		txt_StockoutMaxErro.setText(entity.getShipUpper().toString());
		txt_StockoutMinErro.setText(entity.getShipLower().toString());
	    }
	    else
	    {
		message.setMsgResourceKey("7000035");
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Modify_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Click(ActionEvent e) throws Exception
    {
	ValidateCheck2();
	setConfirm("YKK-LBL-SetConfirm");
	getViewState().setBoolean(DIALOG_FLAG, true);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_TerminalNoBrowse_Click(ActionEvent e) throws Exception
    {
	TerminalViewEntity entity = new TerminalViewEntity();

	entity.setTerminalNo(txt_TerminalNo.getText());
	entity.setSection(txt_FormerProduceLine1.getText());
	entity.setLine(txt_FormerProduceLine2.getText());
	entity.setViewType(this.rdo_Stockin.getChecked() ? 1 : 2);

	session.setAttribute(FNRANGE_ENTITY, entity);

	redirect("/YkkGMAX/Popup/TerminalView.do", null, "/progress.do");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_TerminalNoBrowse_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Click(ActionEvent e) throws Exception
    {
	forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
		.getString(M_MENUID_KEY)));
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Server(ActionEvent e) throws Exception
    {
    }

    private void ClearControls()
    {
	txt_UnitMaxErro.setText("");
	txt_UnitMinErro.setText("");
	txt_StockinMaxErro.setText("");
	txt_StockinMinErro.setText("");
	txt_StockoutMaxErro.setText("");
	txt_StockoutMinErro.setText("");
	txt_TerminalNo_RO.setText("");
	txt_FormerProduceLine1_RO.setText("");
	txt_FormerProduceLine2_RO.setText("");

    }

    private ErrorRangeEntity getErrorRangeEntity()
    {
	ErrorRangeEntity entity = new ErrorRangeEntity();

	try
	{
	    entity
		    .setUnitWeightUpper(new BigDecimal(txt_UnitMaxErro
			    .getText()));
	}
	catch (Exception ex)
	{
	    entity.setUnitWeightUpper(new BigDecimal(0));
	}
	try
	{
	    entity
		    .setUnitWeightLower(new BigDecimal(txt_UnitMinErro
			    .getText()));
	}
	catch (Exception ex)
	{
	    entity.setUnitWeightLower(new BigDecimal(0));
	}
	try
	{
	    entity
		    .setStorageUpper(new BigDecimal(txt_StockinMaxErro
			    .getText()));
	}
	catch (Exception ex)
	{
	    entity.setStorageUpper(new BigDecimal(0));
	}
	try
	{
	    entity
		    .setStorageLower(new BigDecimal(txt_StockinMinErro
			    .getText()));
	}
	catch (Exception ex)
	{
	    entity.setStorageLower(new BigDecimal(0));
	}
	try
	{
	    entity.setShipUpper(new BigDecimal(txt_StockoutMaxErro.getText()));
	}
	catch (Exception ex)
	{
	    entity.setShipUpper(new BigDecimal(0));
	}
	try
	{
	    entity.setShipLower(new BigDecimal(txt_StockoutMinErro.getText()));
	}
	catch (Exception ex)
	{
	    entity.setShipLower(new BigDecimal(0));
	}
	return entity;
    }

    private void InitSession()
    {
	session.setAttribute(FNRANGE_ENTITY, null);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_DealDivision_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_FormerProduceLine1_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_FormerProduceLine2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_InOutDivision_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_PercentSign1_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_PercentSign2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_PercentSign3_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_PercentSign4_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_PercentSign5_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_PercentSign6_Server(ActionEvent e) throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_SettingName_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Star1_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Star2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Star3_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockinMaxErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockinMinErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockoutMaxErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockoutMinErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_TerminalLine1Line2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_TerminalNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_UnitMaxErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_UnitMinErro_Server(ActionEvent e) throws Exception
    {
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {
	if (!this.getViewState().getBoolean(DIALOG_FLAG))
	{
	    return;
	}
	boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
		.booleanValue();
	if (!isExecute)
	{
	    return;
	}
	message.setMsgResourceKey("7000034");

	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    ErrorRangeEntity entity = getErrorRangeEntity();
	    String maintenanceMode = (String) session
		    .getAttribute(MAINTENANCE_MODE);

	    if (maintenanceMode.equals("ADD"))
	    {
		centre.addFnrange(txt_TerminalNo_RO.getText(),
			this.txt_FormerProduceLine1_RO.getText(),
			this.txt_FormerProduceLine2_RO.getText(), entity);
	    }
	    else if (maintenanceMode.equals("MODIFY"))
	    {
		centre.modiFnrange(txt_TerminalNo_RO.getText(),
			this.txt_FormerProduceLine1_RO.getText(),
			this.txt_FormerProduceLine2_RO.getText(), entity);
	    }
	    else if (maintenanceMode.equals("DELETE"))
	    {
		centre.deleteFnrange(txt_TerminalNo_RO.getText(),
			this.txt_FormerProduceLine1_RO.getText(),
			this.txt_FormerProduceLine2_RO.getText());
	    }

	    message.setMsgResourceKey("7400002");
	    conn.commit();
	    ClearControls();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    try
	    {
		if (conn != null)
		{
		    conn.rollback();
		}
	    }
	    catch (SQLException ex)
	    {
		DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
		message.setMsgResourceKey("7200002");
	    }
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    try
	    {
		if (conn != null)
		{
		    conn.rollback();
		}
	    }
	    catch (SQLException ex)
	    {
		DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
		message.setMsgResourceKey("7200002");
	    }
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}

    }

    public void page_DlgBack(ActionEvent e) throws Exception
    {
	((DialogEvent) e).getDialogParameters();

	if (session.getAttribute(FNRANGE_ENTITY) != null)
	{
	    TerminalViewEntity entity = (TerminalViewEntity) session
		    .getAttribute(FNRANGE_ENTITY);

	    txt_TerminalNo.setText(entity.getTerminalNo());
	    txt_FormerProduceLine1.setText(entity.getSection());
	    txt_FormerProduceLine2.setText(entity.getLine());
	    if (StringUtils.IsNullOrEmpty(entity.getTerminalNo()))
	    {
		rdo_Stockin.setChecked(true);
		rdo_Stockin_Click(null);
	    }
	    else
	    {
		rdo_Stockout.setChecked(true);
		rdo_Stockout_Click(null);
	    }
	    session.setAttribute(FNRANGE_ENTITY, null);
	}
    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
	String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
	if (menuparam != null)
	{
	    // #CM37828
	    // fetch parameter
	    String title = CollectionUtils.getMenuParam(0, menuparam);
	    String functionID = CollectionUtils.getMenuParam(1, menuparam);
	    String menuID = CollectionUtils.getMenuParam(2, menuparam);
	    // #CM37829
	    // save to viewstate
	    this.getViewState().setString(M_TITLE_KEY, title);
	    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
	    this.getViewState().setString(M_MENUID_KEY, menuID);
	    // #CM37830
	    // set screen name
	    // lbl_SettingName.setResourceKey(title);
	}
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	InitSession();
	rdo_Stockin_Click(null);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_Stockin_Click(ActionEvent e) throws Exception
    {
	txt_TerminalNo.setReadOnly(true);
	txt_FormerProduceLine1.setReadOnly(false);
	txt_FormerProduceLine2.setReadOnly(false);
	txt_TerminalNo.setText("");

	txt_StockoutMaxErro.setReadOnly(true);
	txt_StockoutMinErro.setReadOnly(true);
	txt_StockinMaxErro.setReadOnly(false);
	txt_StockinMinErro.setReadOnly(false);
	txt_UnitMaxErro.setReadOnly(false);
	txt_UnitMinErro.setReadOnly(false);
	ClearControls();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_Stockin_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_Stockout_Click(ActionEvent e) throws Exception
    {
	txt_TerminalNo.setReadOnly(false);
	txt_FormerProduceLine1.setReadOnly(true);
	txt_FormerProduceLine2.setReadOnly(true);
	txt_FormerProduceLine1.setText("");
	txt_FormerProduceLine2.setText("");

	txt_StockoutMaxErro.setReadOnly(false);
	txt_StockoutMinErro.setReadOnly(false);
	txt_StockinMaxErro.setReadOnly(true);
	txt_StockinMinErro.setReadOnly(true);
	txt_UnitMaxErro.setReadOnly(true);
	txt_UnitMinErro.setReadOnly(true);
	ClearControls();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_Stockout_Server(ActionEvent e) throws Exception
    {
    }

    private void setAddMode()
    {
	txt_UnitMaxErro.setReadOnly(false);
	txt_UnitMinErro.setReadOnly(false);
	txt_StockinMaxErro.setReadOnly(false);
	txt_StockinMinErro.setReadOnly(false);
	txt_StockoutMaxErro.setReadOnly(false);
	txt_StockoutMinErro.setReadOnly(false);

	session.setAttribute(MAINTENANCE_MODE, "ADD");

    }

    private void setDeleteMode()
    {
	txt_UnitMaxErro.setReadOnly(true);
	txt_UnitMinErro.setReadOnly(true);
	txt_StockinMaxErro.setReadOnly(true);
	txt_StockinMinErro.setReadOnly(true);
	txt_StockoutMaxErro.setReadOnly(true);
	txt_StockoutMinErro.setReadOnly(true);

	session.setAttribute(MAINTENANCE_MODE, "DELETE");

    }

    private void setModifyMode()
    {
	txt_UnitMaxErro.setReadOnly(false);
	txt_UnitMinErro.setReadOnly(false);
	txt_StockinMaxErro.setReadOnly(false);
	txt_StockinMinErro.setReadOnly(false);
	txt_StockoutMaxErro.setReadOnly(false);
	txt_StockoutMinErro.setReadOnly(false);

	session.setAttribute(MAINTENANCE_MODE, "MODIFY");

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void tab_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_AutoComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_RO_AutoComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_RO_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_RO_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_RO_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_RO_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_RO_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine1_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_AutoComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_RO_AutoComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_RO_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_RO_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_RO_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_RO_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_RO_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_FormerProduceLine2_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinMaxErro_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinMaxErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinMaxErro_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinMinErro_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinMinErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinMinErro_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutMaxErro_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutMaxErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutMaxErro_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutMinErro_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutMinErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutMinErro_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_RO_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_RO_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_RO_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_RO_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_RO_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_RO_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TerminalNo_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_UnitMaxErro_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_UnitMaxErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_UnitMaxErro_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_UnitMinErro_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_UnitMinErro_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_UnitMinErro_TabKey(ActionEvent e) throws Exception
    {
    }

    private void ValidateCheck() throws ValidateException
    {
	if (rdo_Stockout.getChecked())
	{
	    setFocus(txt_TerminalNo);
	    txt_TerminalNo.validate();
	}
	else
	{
	    setFocus(this.txt_FormerProduceLine1);
	    txt_FormerProduceLine1.validate();
	    setFocus(this.txt_FormerProduceLine2);
	    txt_FormerProduceLine2.validate();
	}
	setFocus(null);

    }

    private void ValidateCheck2() throws ValidateException
    {
	if (rdo_Stockout.getChecked())
	{
	    setFocus(txt_TerminalNo_RO);
	    txt_TerminalNo_RO.validate();
	}
	else
	{
	    setFocus(this.txt_FormerProduceLine1_RO);
	    txt_FormerProduceLine1_RO.validate();
	    setFocus(this.txt_FormerProduceLine2_RO);
	    txt_FormerProduceLine2_RO.validate();
	}
	setFocus(txt_UnitMaxErro);
	txt_UnitMaxErro.validate();
	setFocus(txt_UnitMinErro);
	txt_UnitMinErro.validate();
	setFocus(txt_StockinMaxErro);
	txt_StockinMaxErro.validate();
	setFocus(txt_StockinMinErro);
	txt_StockinMinErro.validate();
	setFocus(txt_StockoutMaxErro);
	txt_StockoutMaxErro.validate();
	setFocus(txt_StockoutMinErro);
	txt_StockoutMinErro.validate();
	setFocus(null);

    }

}
// end of class
