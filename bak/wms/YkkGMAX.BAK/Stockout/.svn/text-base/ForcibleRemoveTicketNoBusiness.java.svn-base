// $Id: ForcibleRemoveTicketNoBusiness.java,v 1.3 2007/12/30 05:17:36 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Stockout;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.SystemIdSortable;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListHandler.SystemIdSortableHandler;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.ForcibleRemoveTicketNoLowListProxy;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.ForcibleRemoveTicketNoUpListProxy;
import jp.co.daifuku.wms.YkkGMAX.PageController.ForcibleRemoveTicketNoPager;
import jp.co.daifuku.wms.YkkGMAX.PageController.PageController;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.resident.ForcibleRemoveTicketNoRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ProcessorInvoker;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.3 $, $Date: 2007/12/30 05:17:36 $
 * @author $Author: administrator $
 */
public class ForcibleRemoveTicketNoBusiness extends ForcibleRemoveTicketNo
	implements WMSConstants
{
    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    public static class rowComparator implements Comparator
    {
	public int compare(Object o1, Object o2)
	{
	    return Integer.valueOf(o2.toString()).compareTo(
		    Integer.valueOf(o1.toString()));
	}
    }

    private final String DIALOG_FLAG = "DIALOG_FLAG";
    private final String ITEM_CODE = "ITEM_CODE";
    private final String COLOR_CODE = "COLOR_CODE";
    private final ForcibleRemoveTicketNoUpListProxy listUpProxy = new ForcibleRemoveTicketNoUpListProxy(
	    lst_ForcibleRemoveTicketNo_Up, this);

    private final ForcibleRemoveTicketNoLowListProxy listLowProxy = new ForcibleRemoveTicketNoLowListProxy(
	    lst_ForcibleRemoveTicketNo_Low);

    private final PageController pageController = new PageController(
	    new ForcibleRemoveTicketNoPager(this, pgr_Up),
	    new ForcibleRemoveTicketNoPager(this, pgr_Low), message);

    private final String FORCIBLE_REMOVE_TICKET_NO_UP_LIST = "FORCIBLE_REMOVE_TICKET_NO_UP_LIST";

    private final String FORCIBLE_REMOVE_TICKET_NO_LOW_LIST = "FORCIBLE_REMOVE_TICKET_NO_LOW_LIST";

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Delete_Click(ActionEvent e) throws Exception
    {
	ArrayList list = (ArrayList) session
		.getAttribute(FORCIBLE_REMOVE_TICKET_NO_LOW_LIST);

	ArrayList removeRows = new ArrayList();
	for (int j = 0; j < list.size(); j++)
	{
	    SystemIdSortable entity = (SystemIdSortable) list.get(j);
	    for (int i = 1; i < lst_ForcibleRemoveTicketNo_Low.getMaxRows(); i++)
	    {
		lst_ForcibleRemoveTicketNo_Low.setCurrentRow(i);
		if (entity.getSystemId().equals(listLowProxy.getSystemId()))
		{
		    removeRows.add(String.valueOf(i));
		}
	    }
	}
	Comparator comparator = new rowComparator();
	Collections.sort(removeRows, comparator);

	for (int i = 0; i < removeRows.size(); i++)
	{
	    int row = Integer.parseInt(removeRows.get(i).toString());
	    lst_ForcibleRemoveTicketNo_Low.removeRow(row);
	}
	list.clear();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Delete_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Help_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Input_Click(ActionEvent e) throws Exception
    {
	ArrayList inputList = (ArrayList) session
		.getAttribute(FORCIBLE_REMOVE_TICKET_NO_UP_LIST);

	ArrayList ticketNoToRemoveList = (ArrayList) session
		.getAttribute(FORCIBLE_REMOVE_TICKET_NO_LOW_LIST);
	listLowProxy.InputForcibleRemoveTicketNoLowList(inputList,
		ticketNoToRemoveList);
	InitPage1();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Input_Server(ActionEvent e) throws Exception
    {
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_InputTicketNo_Click(ActionEvent e) throws Exception
    {
	ValidateCheck2();
	try
	{
	    // if (!listLowProxy.InputForcibleRemoveTicketNoLowList(txt_TicketNo
	    // .getText(), message))
	    // {
	    // setFocus(this.txt_TicketNo);
	    // }
	    ArrayList ticketNoToRemoveList = (ArrayList) session
		    .getAttribute(FORCIBLE_REMOVE_TICKET_NO_LOW_LIST);

	    listLowProxy.InputForcibleRemoveTicketNoLowList(txt_TicketNo
		    .getText(), ticketNoToRemoveList, message);
	    setFocus(this.txt_TicketNo);
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    setFocus(this.txt_TicketNo);

	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    setFocus(this.txt_TicketNo);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_InputTicketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Click(ActionEvent e) throws Exception
    {
	setConfirm("YKK-LBL-SetConfirm");
	getViewState().setBoolean(DIALOG_FLAG, true);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show_Click(ActionEvent e) throws Exception
    {
	ValidateCheck1();
	session.setAttribute(ITEM_CODE, txt_Item.getText());
	session.setAttribute(COLOR_CODE, txt_Color.getText());
	try
	{
	    pageController.init();
	    pageController.setCountPerPage(30);
	    pageController.turnToFirstPage();

	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Click(ActionEvent e) throws Exception
    {
	forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
		.getString(M_MENUID_KEY)));
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Server(ActionEvent e) throws Exception
    {
    }

    private void InitPage1()
    {
	session
		.setAttribute(FORCIBLE_REMOVE_TICKET_NO_UP_LIST,
			new ArrayList());
	session.setAttribute(ITEM_CODE, null);
	session.setAttribute(COLOR_CODE, null);
	lst_ForcibleRemoveTicketNo_Up.clearRow();
	pageController.clear();
    }

    private void InitPage2()
    {
	session.setAttribute(FORCIBLE_REMOVE_TICKET_NO_LOW_LIST,
		new ArrayList());
	lst_ForcibleRemoveTicketNo_Low.clearRow();

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Color_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Item_Server(ActionEvent e) throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_SettingName_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_TicketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_Change(ActionEvent e)
	    throws Exception
    {
	int row = Integer.parseInt(e.getEventArgs().get(0).toString());
	int col = Integer.parseInt(e.getEventArgs().get(1).toString());
	ArrayList list = (ArrayList) session
		.getAttribute(FORCIBLE_REMOVE_TICKET_NO_LOW_LIST);
	if (col == listLowProxy.getALL_COLUMN())
	{
	    lst_ForcibleRemoveTicketNo_Low.setCurrentRow(row);
	    if (listLowProxy.getAll())
	    {
		SystemIdSortableHandler.insert(list, listLowProxy
			.getforcibleRemoveTicketNoUpEntity());
	    }
	    else
	    {
		SystemIdSortableHandler.remove(list, listLowProxy
			.getforcibleRemoveTicketNoUpEntity());
	    }

	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_Click(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_ColumClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Low_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_Change(ActionEvent e)
	    throws Exception
    {
	int row = Integer.parseInt(e.getEventArgs().get(0).toString());
	int col = Integer.parseInt(e.getEventArgs().get(1).toString());
	ArrayList list = (ArrayList) session
		.getAttribute(FORCIBLE_REMOVE_TICKET_NO_UP_LIST);
	if (col == listUpProxy.getALL_COLUMN())
	{
	    lst_ForcibleRemoveTicketNo_Up.setCurrentRow(row);
	    if (listUpProxy.getAll())
	    {
		SystemIdSortableHandler.insert(list, listUpProxy
			.getforcibleRemoveTicketNoUpEntity());
	    }
	    else
	    {
		SystemIdSortableHandler.remove(list, listUpProxy
			.getforcibleRemoveTicketNoUpEntity());
	    }

	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_Click(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_ColumClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ForcibleRemoveTicketNo_Up_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {
	if (!this.getViewState().getBoolean(DIALOG_FLAG))
	{
	    return;
	}
	boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
		.booleanValue();
	if (!isExecute)
	{
	    return;
	}
	message.setMsgResourceKey("7000034");
	ArrayList list = (ArrayList) session
		.getAttribute(FORCIBLE_REMOVE_TICKET_NO_LOW_LIST);

	ProcessorInvoker pi = new ProcessorInvoker(message);
	if (list != null && list.size() > 0)
	{
	    pi.addProcessor(new ForcibleRemoveTicketNoRequestProcessor(list,
		    getUserInfo().getUserId()));
	}
	pi.run();

	InitPage2();
    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
	String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
	if (menuparam != null)
	{
	    // #CM37828
	    // fetch parameter
	    String title = CollectionUtils.getMenuParam(0, menuparam);
	    String functionID = CollectionUtils.getMenuParam(1, menuparam);
	    String menuID = CollectionUtils.getMenuParam(2, menuparam);
	    // #CM37829
	    // save to viewstate
	    this.getViewState().setString(M_TITLE_KEY, title);
	    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
	    this.getViewState().setString(M_MENUID_KEY, menuID);
	    // #CM37830
	    // set screen name
	    // lbl_SettingName.setResourceKey(title);
	}
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	InitPage1();
	InitPage2();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_First(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToFirstPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Last(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToLastPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Next(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToNextPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Prev(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToPreviousPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_First(ActionEvent e)
    {
	try
	{
	    pageController.turnToFirstPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Last(ActionEvent e)
    {
	try
	{
	    pageController.turnToLastPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Next(ActionEvent e)
    {
	try
	{
	    pageController.turnToNextPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Prev(ActionEvent e)
    {
	try
	{
	    pageController.turnToPreviousPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Color_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Color_AutoCompleteItemClick(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Color_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Color_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Color_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Color_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Item_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Item_AutoCompleteItemClick(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Item_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Item_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Item_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Item_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_EnterKey(ActionEvent e) throws Exception
    {
	btn_InputTicketNo_Click(null);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_TabKey(ActionEvent e) throws Exception
    {
    }

    private void ValidateCheck1() throws ValidateException
    {
	setFocus(txt_Item);
	txt_Item.validate();
	setFocus(null);
    }

    private void ValidateCheck2() throws ValidateException
    {
	setFocus(txt_TicketNo);
	txt_TicketNo.validate();
	setFocus(null);
    }
}
// end of class
