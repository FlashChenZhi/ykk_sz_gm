// $Id: ExceptionStockoutPopupBusiness.java,v 1.4 2007/12/30 05:17:36 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Stockout;

import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.util.ResourceHandler;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.ForwardParameters;
import jp.co.daifuku.wms.YkkGMAX.Entities.ExceptionStockoutEntity;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListHandler.SystemIdSortableHandler;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.ExceptionStockoutPopupListProxy;
import jp.co.daifuku.wms.YkkGMAX.PageController.ExceptionStockoutDetailPager;
import jp.co.daifuku.wms.YkkGMAX.PageController.PageController;
import jp.co.daifuku.wms.YkkGMAX.PulldownManager.PulldownManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.base.common.WMSConstants;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.4 $, $Date: 2007/12/30 05:17:36 $
 * @author $Author: administrator $
 */
public class ExceptionStockoutPopupBusiness extends ExceptionStockoutPopup
	implements WMSConstants
{

    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------
    private final String EXCEPTION_STOCKOUT_DETAIL_LIST = "EXCEPTION_STOCKOUT_DETAIL_LIST";

    private final String EXCEPTION_STOCKOUT_ENTITY = "EXCEPTION_STOCKOUT_ENTITY";

    private final ResourceHandler resourceHandler = new ResourceHandler(
	    StringUtils.DispResourceName);

    private final ExceptionStockoutPopupListProxy listProxy = new ExceptionStockoutPopupListProxy(
	    lst_ExceptionStockoutPopup, this);

    private final PageController pageController = new PageController(
	    new ExceptionStockoutDetailPager(this, pgr_Up),
	    new ExceptionStockoutDetailPager(this, pgr_Low), message);

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Low_Click(ActionEvent e) throws Exception
    {
	this.closeWindow();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Low_Server(ActionEvent e) throws Exception
    {
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Up_Click(ActionEvent e) throws Exception
    {
	this.closeWindow();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Close_Up_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_SelectAll_Click(ActionEvent e) throws Exception
    {
	ArrayList exceptionStockoutDetailList = (ArrayList) session
		.getAttribute(EXCEPTION_STOCKOUT_DETAIL_LIST);
	for (int i = 1; i < lst_ExceptionStockoutPopup.getMaxRows(); i++)
	{
	    lst_ExceptionStockoutPopup.setCurrentRow(i);

	    if (!listProxy.getAll())
	    {
		SystemIdSortableHandler.insert(exceptionStockoutDetailList,
			listProxy.getExceptionStockoutDetailEntity());

		listProxy.setAll(true);

	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_SelectAll_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Low_Click(ActionEvent e) throws Exception
    {
	btn_Set_Up_Click(null);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Low_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Up_Click(ActionEvent e) throws Exception
    {
	ExceptionStockoutEntity exceptionStockoutEntity = (ExceptionStockoutEntity) session
		.getAttribute(EXCEPTION_STOCKOUT_ENTITY);

	ArrayList exceptionStockoutDetailList = (ArrayList) session
		.getAttribute(EXCEPTION_STOCKOUT_DETAIL_LIST);

	exceptionStockoutEntity
		.setExceptionStockoutDetailList(exceptionStockoutDetailList);
	exceptionStockoutEntity.setEndStation(pul_StockoutStation
		.getSelectedValue());

	ForwardParameters param = new ForwardParameters();
	parentRedirect(param);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Up_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show_Click(ActionEvent e) throws Exception
    {
	ExceptionStockoutEntity entity = (ExceptionStockoutEntity) session
		.getAttribute(EXCEPTION_STOCKOUT_ENTITY);
	if (rdo_LocationNo.getChecked())
	{
	    entity.setOrderMode(1);
	}
	else if (rdo_ItemNo.getChecked())
	{
	    entity.setOrderMode(2);
	}
	else if (rdo_StockinTime.getChecked())
	{
	    entity.setOrderMode(3);
	}
	else
	{
	    entity.setOrderMode(4);
	}
	try
	{
	    pageController.init();
	    pageController.setCountPerPage(30);
	    pageController.turnToFirstPage();

	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Show_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_UnselectAll_Click(ActionEvent e) throws Exception
    {
	ArrayList stockoutStartList = (ArrayList) session
		.getAttribute(EXCEPTION_STOCKOUT_DETAIL_LIST);
	for (int i = 1; i < lst_ExceptionStockoutPopup.getMaxRows(); i++)
	{
	    lst_ExceptionStockoutPopup.setCurrentRow(i);

	    if (listProxy.getAll())
	    {
		SystemIdSortableHandler.remove(stockoutStartList, listProxy
			.getExceptionStockoutDetailEntity());

		listProxy.setAll(false);

	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_UnselectAll_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_OrderBy_Server(ActionEvent e) throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockoutCondition_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockoutRange_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockoutStation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_Change(ActionEvent e)
	    throws Exception
    {
	int row = Integer.parseInt(e.getEventArgs().get(0).toString());
	int col = Integer.parseInt(e.getEventArgs().get(1).toString());
	ArrayList list = (ArrayList) session
		.getAttribute(EXCEPTION_STOCKOUT_DETAIL_LIST);
	if (col == listProxy.getALL_COLUMN())
	{
	    lst_ExceptionStockoutPopup.setCurrentRow(row);
	    if (listProxy.getAll())
	    {
		SystemIdSortableHandler.insert(list, listProxy
			.getExceptionStockoutDetailEntity());
	    }
	    else
	    {
		SystemIdSortableHandler.remove(list, listProxy
			.getExceptionStockoutDetailEntity());
	    }

	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_Click(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_ColumClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_EnterKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lst_ExceptionStockoutPopup_TabKey(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	session.setAttribute(EXCEPTION_STOCKOUT_DETAIL_LIST, new ArrayList());
	ExceptionStockoutEntity entity = (ExceptionStockoutEntity) session
		.getAttribute(EXCEPTION_STOCKOUT_ENTITY);
	txt_StockoutCondition.setText(entity.getStockoutCondition());
	String stockoutRange = "";
	if (entity.getStockoutMode() == 1)
	{
	    stockoutRange = StringUtils.formatDateFromDBToPage(entity
		    .getStockinDate())
		    + " "
		    + StringUtils.formatTimeFromDBToPage(entity
			    .getStockinTime());
	}
	else if (entity.getStockoutMode() == 2)
	{
	    if (StringUtils.IsNullOrEmpty(entity.getItemCode()))
	    {
		stockoutRange = resourceHandler.getText("YKK-LBL-AllItems")
			+ " ";
	    }
	    else
	    {
		stockoutRange = entity.getItemCode() + " ";
	    }
	    stockoutRange += String.valueOf(entity.getInstockCount())
		    + resourceHandler.getText("YKK-LBL-FewerThanThis");
	}
	else if (entity.getStockoutMode() == 3)
	{
	    if (!entity.isSearchItemCode())
	    {
		if (!StringUtils.IsNullOrEmpty(entity.getLocationNoFrom())
			|| !StringUtils.IsNullOrEmpty(entity.getLocationNoTo()))
		{
		    stockoutRange = StringUtils
			    .formatLocationNoFromDBToPage(entity
				    .getLocationNoFrom())
			    + "～"
			    + StringUtils.formatLocationNoFromDBToPage(entity
				    .getLocationNoTo());
		}

	    }
	    else
	    {
		stockoutRange = entity.getItemCode();
	    }
	}
	else if (entity.getStockoutMode() == 4)
	{
	    stockoutRange = entity.getItemCode();
	}
	else
	{
	    stockoutRange = StringUtils.formatLocationNoFromDBToPage(entity
		    .getLocationNo());
	    if (entity.isAfterThisLocation())
	    {
		stockoutRange += resourceHandler
			.getText("YKK-LBL-AfterThisLocation");
	    }
	}
	try
	{
	    if (entity.getStockoutMode() == 3)
	    {
		PulldownManager.FillPickingStationPullDown(pul_StockoutStation);
	    }
	    else
	    {
		PulldownManager.FillRejectStationPullDown(pul_StockoutStation);
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	txt_StockoutRange.setText(stockoutRange);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_First(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToFirstPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Last(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToLastPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Next(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToNextPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Low_Prev(ActionEvent e) throws Exception
    {
	try
	{
	    pageController.turnToPreviousPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_First(ActionEvent e)
    {
	try
	{
	    pageController.turnToFirstPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Last(ActionEvent e)
    {
	try
	{
	    pageController.turnToLastPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Next(ActionEvent e)
    {
	try
	{
	    pageController.turnToNextPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pgr_Up_Prev(ActionEvent e)
    {
	try
	{
	    pageController.turnToPreviousPage();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pul_StockoutStation_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void pul_StockoutStation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ItemNo_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ItemNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_Line1Line2_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_Line1Line2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_LocationNo_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_LocationNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_StockinTime_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_StockinTime_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutCondition_AutoComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutCondition_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutCondition_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutCondition_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutCondition_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutCondition_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutRange_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutRange_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutRange_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutRange_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutRange_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockoutRange_TabKey(ActionEvent e) throws Exception
    {
    }

}
// end of class
