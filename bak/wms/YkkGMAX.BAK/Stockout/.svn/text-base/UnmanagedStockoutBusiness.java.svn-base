// $Id: UnmanagedStockoutBusiness.java,v 1.4 2008/01/02 02:35:13 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Stockout;

import jp.co.daifuku.bluedog.util.ResourceHandler;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.UnmanagedStockoutEntity;
import jp.co.daifuku.wms.YkkGMAX.Utils.DBFlags;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.resident.AfterStockoutRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ProcessorInvoker;
import jp.co.daifuku.wms.YkkGMAX.resident.UnmanagedStockoutRequestProcessor;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.4 $, $Date: 2008/01/02 02:35:13 $
 * @author $Author: administrator $
 */
public class UnmanagedStockoutBusiness extends UnmanagedStockout implements
	WMSConstants
{

    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    private static final String MANAGE_ITEM_FLAG = "MANAGE_ITEM_FLAG";
    private final String DIALOG_FLAG = "DIALOG_FLAG";
    private final String ITEM_CODE = "ITEM_CODE";
    private final String MODE_NO = "MODE_NO";
    private final String UNMANAGED_STOCKOUT_ENTITY = "UNMANAGED_STOCKOUT_ENTITY";
    private final String STOCKOUT_MODE = "STOCKOUT_MODE";
    private final ResourceHandler resourceHandler = new ResourceHandler(
	    StringUtils.DispResourceName);

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Help_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ItemBrowse_Click(ActionEvent e) throws Exception
    {
	session.setAttribute(ITEM_CODE, txt_ItemNo.getText());
	session.setAttribute(MODE_NO, "1");
	session.setAttribute(MANAGE_ITEM_FLAG,
		DBFlags.ManageItemFlag.WITHOUTMANAGE);

	redirect("/YkkGMAX/Popup/ItemView.do", null, "/progress.do");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ItemBrowse_Server(ActionEvent e) throws Exception
    {
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Click(ActionEvent e) throws Exception
    {
	UnmanagedStockoutEntity entity = (UnmanagedStockoutEntity) session
		.getAttribute(UNMANAGED_STOCKOUT_ENTITY);
	String stockoutCondition = "";
	if (this.rdo_SearchStockout.getChecked())
	{
	    entity.setStockoutMode(1);
	    stockoutCondition = resourceHandler.getText(lbl_ItemNo
		    .getResourceKey());
	    entity.setItemCode(txt_ItemNo.getText());
	}
	else
	{
	    entity.setStockoutMode(2);
	    stockoutCondition = resourceHandler.getText(lbl_LocationNo
		    .getResourceKey());
	    entity.setLocationNo(StringUtils
		    .formatLocationNoFromPageToDB(txt_LocationNo.getText()));
	    entity.setAfterThisLocation(chk_AfterThisLocation.getChecked());
	}
	entity.setStockoutCondition(stockoutCondition);
	session.setAttribute(MODE_NO, "2");
	redirect("/YkkGMAX/Stockout/UnmanagedStockoutPopup.do", null,
		"/progress.do");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Click(ActionEvent e) throws Exception
    {
	forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
		.getString(M_MENUID_KEY)));
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_AfterThisLocation_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_AfterThisLocation_Server(ActionEvent e) throws Exception
    {
    }

    private void InitPage()
    {
	session.setAttribute(ITEM_CODE, null);
	session.setAttribute(UNMANAGED_STOCKOUT_ENTITY,
		new UnmanagedStockoutEntity());
	session.setAttribute(MANAGE_ITEM_FLAG, null);
	session.setAttribute(MODE_NO, "0");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_ItemNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_LocationNo_Server(ActionEvent e) throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_SettingName_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockoutCondition_Server(ActionEvent e) throws Exception
    {
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {
	if (!this.getViewState().getBoolean(DIALOG_FLAG))
	{
	    return;
	}
	boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
		.booleanValue();
	if (!isExecute)
	{
	    return;
	}
	message.setMsgResourceKey("7000034");
	UnmanagedStockoutEntity entity = (UnmanagedStockoutEntity) session
		.getAttribute(UNMANAGED_STOCKOUT_ENTITY);

	ProcessorInvoker pi = new ProcessorInvoker(message);
	if (entity != null)
	{
	    pi.addProcessor(new UnmanagedStockoutRequestProcessor(entity,getUserInfo().getUserId()));
	}
	if (pi.run())
	{
	    pi = new ProcessorInvoker(message);
	    pi.addProcessor(new AfterStockoutRequestProcessor());
	    pi.run();
	}

	InitPage();
    }

    public void page_DlgBack(ActionEvent e) throws Exception
    {
	((DialogEvent) e).getDialogParameters();

	int modeNo = Integer.parseInt(session.getAttribute(MODE_NO).toString());

	if (session.getAttribute(ITEM_CODE) != null && modeNo == 1)
	{
	    txt_ItemNo.setText((String) session.getAttribute(ITEM_CODE));

	    InitPage();
	}
	else if (modeNo == 2)
	{
	    setConfirm("YKK-LBL-SetConfirm");
	    getViewState().setBoolean(DIALOG_FLAG, true);
	}

    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
	String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
	if (menuparam != null)
	{
	    // #CM37828
	    // fetch parameter
	    String title = CollectionUtils.getMenuParam(0, menuparam);
	    String functionID = CollectionUtils.getMenuParam(1, menuparam);
	    String menuID = CollectionUtils.getMenuParam(2, menuparam);
	    // #CM37829
	    // save to viewstate
	    this.getViewState().setString(M_TITLE_KEY, title);
	    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
	    this.getViewState().setString(M_MENUID_KEY, menuID);
	    // #CM37830
	    // set screen name
	    // lbl_SettingName.setResourceKey(title);
	}
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	session.setAttribute(STOCKOUT_MODE, "1");
	InitPage();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_DesignateLocationStockout_Click(ActionEvent e)
	    throws Exception
    {
	session.setAttribute(STOCKOUT_MODE, "2");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_DesignateLocationStockout_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_SearchStockout_Click(ActionEvent e) throws Exception
    {
	session.setAttribute(STOCKOUT_MODE, "1");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_SearchStockout_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemNo_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemNo_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemNo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemNo_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemNo_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_TabKey(ActionEvent e) throws Exception
    {
    }
}
// end of class
