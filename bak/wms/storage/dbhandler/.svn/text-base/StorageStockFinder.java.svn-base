package jp.co.daifuku.wms.storage.dbhandler;

//#CM566479
/*
 * Created on 2004/11/18
 *
 * Copyright 2000-2003 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;

import jp.co.daifuku.common.LogMessage;
import jp.co.daifuku.common.MessageResource;
import jp.co.daifuku.common.ReadWriteException;
import jp.co.daifuku.common.RmiMsgLogClient;
import jp.co.daifuku.common.ScheduleException;
import jp.co.daifuku.common.TraceHandler;
import jp.co.daifuku.common.text.DBFormat;
import jp.co.daifuku.common.text.StringUtil;
import jp.co.daifuku.wms.base.common.Entity;
import jp.co.daifuku.wms.base.common.SearchKey;
import jp.co.daifuku.wms.base.dbhandler.DatabaseFinder;
import jp.co.daifuku.wms.base.entity.Area;
import jp.co.daifuku.wms.base.entity.Stock;
import jp.co.daifuku.wms.master.operator.AreaOperator;
import jp.co.daifuku.wms.storage.schedule.StorageSupportParameter;



//#CM566480
/**
 * The Finder class only for the retrieval which joins Storage tables of the data base with the Location table. 
 * Use this class when you have a look at display of the retrieval result on the screen. <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"><TD>Date</TD><TD>Name</TD><TD>Comment</TD></TR>
 * <TR><TD>${date}</TD><TD>muneendra y</TD><TD></TD></TR>
 * </TABLE>
 * <BR>
 * @author $Author: suresh $
 * @version $Revision: 1.2 $ $Date: 2006/12/07 08:56:14 $
 */
public class StorageStockFinder  implements DatabaseFinder
{
	//#CM566481
	/**
	 * Delimiter
	 * The delimiter of the parameter of the message of MessageDef When Exception is generated.
	 * 	For ex: String msginfo = "9000000" + wDelim + "Palette" + wDelim + "Stock" ;
	 */
	private String wDelim = MessageResource.DELIM ;
    //#CM566482
    /**
     * Variable which manages statement. 
     */
	protected Statement wStatement = null ;

	private int wSearchCondition = 0;

	//#CM566483
	/**
	 * Variable which maintains retrieval result. 
	 */
	protected ResultSet wResultSet = null ;
	
	//#CM566484
	/**
	 * Connection instance for data base connection. 
	 * Do not do the transaction management in this class. 
	 */
	protected Connection wConn ;
	//#CM566485
	// Class method --------------------------------------------------
	//#CM566486
	/**
	 * Return the version of this class. 
	 * @return Version and date
	 */
	public static String getVersion()
	{
		return ("$Revision: 1.2 $,$Date: 2006/12/07 08:56:14 $");
	}
	
//#CM566487
//	 Public methods ------------------------------------------------
	//#CM566488
	/**
	 * Set <code>Connection</code> for the database connection. 
	 * @param conn Set Connection
	 */
	public void setConnection(Connection conn)
	{
		wConn = conn ;
	}
	
	//#CM566489
	/**
	 * Generate the statement, and open the cursor. 
	 * @throws ReadWriteException It is notified when abnormality occurs by the connection with the data base. 
	 */
	public void open() throws ReadWriteException
	{
		try
		{
			wStatement = wConn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY) ;
		}
		catch (SQLException e)
		{
			//#CM566490
			//6006002 = Database error occurred.{0}
			RmiMsgLogClient.write( new TraceHandler(6006002, e), "StockFinder" ) ;
			throw (new ReadWriteException("6006002" + wDelim + Integer.toString(e.getErrorCode()))) ;
		}
	}

	//#CM566491
	/**
	 * Close the statement. 
	 * @throws ReadWriteException It is notified when abnormality occurs by the connection with the data base. 
	 */
	public void close() throws ReadWriteException
	{
		try
		{
			if (wResultSet != null) { wResultSet.close();  wResultSet = null; }
			if (wStatement != null) { wStatement.close();  wStatement = null; }
		}
		catch (SQLException e)
		{
			//#CM566492
			// 6006002 = Database error occurred.{0}
			RmiMsgLogClient.write(new TraceHandler(6006002, e), "StockFinder");
			throw (new ReadWriteException("6006002" + wDelim + "DnStock"));
		}
	}

	
	//#CM566493
	// Constructors --------------------------------------------------
	//#CM566494
	/**
	 * Generate the instance specifying <code>Connection</code> for the database connection. 
	 * @param conn Connection for database
	 */
	public StorageStockFinder(Connection conn)
	{
		setConnection(conn);  
	}
	
	//#CM566495
	/**
	 * This method acquires Consignor Code which exists in both tables (UNION) the DMSTOCK table and DNINVENTORYCHECK. 
     * @param key Key for retrieval
     * @return int Number of retrieval results
     * @throws ReadWriteException Notify the exception generated by the connection with the data base as it is. 
     * @throws ScheduleException It is notified when Exception not anticipated in the check processing is generated. 
	 */
	public int searchConsinor(StorageSupportParameter parameter)  throws ReadWriteException, ScheduleException
	{
		int count = 0;		
		ResultSet countSet = null;
		this.wSearchCondition = 1;
        try
        {	
			
        	StringBuffer countConsignorSQL = new StringBuffer();
			String coutSql = "SELECT COUNT(*) AS COUNT FROM (SELECT DMSTOCK.CONSIGNOR_CODE,DMSTOCK.CONSIGNOR_NAME FROM DMSTOCK WHERE DMSTOCK.STATUS_FLAG = '2' AND DMSTOCK.STOCK_QTY > 0 ";
			String selectSql = "SELECT DMSTOCK.CONSIGNOR_CODE,DMSTOCK.CONSIGNOR_NAME FROM DMSTOCK WHERE DMSTOCK.STATUS_FLAG = '2' AND DMSTOCK.STOCK_QTY > 0 ";
			
			if(parameter.getAreaTypeFlag().equals(StorageSupportParameter.AREA_TYPE_FLAG_NOASRS)){
				AreaOperator AreaOperator = new AreaOperator(wConn);
				
				String[] areaNo = null;
				String areaSQL = "";
				int[] areaType = new int[2];
				areaType[0] = Area.SYSTEM_DISC_KEY_WMS;
				areaType[1] = Area.SYSTEM_DISC_KEY_IDM;
				
				//#CM566496
				// Acquire the areas other than ASRS, and add to the search condition. 
				//#CM566497
				// IS NULL retrieval when there is no pertinent area
				areaNo = AreaOperator.getAreaNo(areaType);
				if (areaNo != null)
				{
					for (int i = 0 ; i < areaNo.length ; i++)
					{
						if (i == 0)
						{
							areaSQL = " AND ( DMSTOCK.AREA_NO = '" + areaNo[i] + "' ";
						}
						else
						{
							areaSQL += " OR DMSTOCK.AREA_NO = '" + areaNo[i] + "' ";
						}
						
					}
					
					if (!StringUtil.isBlank(areaSQL))
					{
						areaSQL += " ) ";
						countConsignorSQL.append(areaSQL);
					}
				}
				else
				{
					countConsignorSQL.append(" AND DMSTOCK.AREA_NO IS NULL ");
				}
			}
			
			if (!StringUtil.isBlank(parameter.getConsignorCode()))
			{
				countConsignorSQL.append("AND DMSTOCK.CONSIGNOR_CODE LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getConsignorCode().replace('*','%')));
			}
			
			countConsignorSQL.append(" GROUP BY DMSTOCK.CONSIGNOR_CODE,CONSIGNOR_NAME");
			
			countConsignorSQL.append(" UNION SELECT DNINVENTORYCHECK.CONSIGNOR_CODE,DNINVENTORYCHECK.CONSIGNOR_NAME FROM DNINVENTORYCHECK WHERE DNINVENTORYCHECK.STATUS_FLAG = '0'");
			
			if (!StringUtil.isBlank(parameter.getConsignorCode()))
			{
				countConsignorSQL.append("AND DNINVENTORYCHECK.CONSIGNOR_CODE LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getConsignorCode().replace('*','%')));
			}
			
			countConsignorSQL.append(" GROUP BY DNINVENTORYCHECK.CONSIGNOR_CODE,DNINVENTORYCHECK.CONSIGNOR_NAME ");
			
			System.out.println(coutSql + countConsignorSQL.toString()+")");
        	countSet = wStatement.executeQuery(coutSql + countConsignorSQL.toString()+")");
			
        	while (countSet.next())
			{
				count = countSet.getInt("COUNT");
			}
			//#CM566498
			//Execute the retrieval when the number of cases is only MAXDISP or less. 
			if ( count <= DatabaseFinder.MAXDISP )
			{
				System.out.println(selectSql + countConsignorSQL.toString()+ "ORDER BY CONSIGNOR_CODE,CONSIGNOR_NAME");
				wResultSet = wStatement.executeQuery(selectSql + countConsignorSQL.toString()+ "ORDER BY CONSIGNOR_CODE,CONSIGNOR_NAME");
			}
			else
			{
				wResultSet = null;
			}
        		
        }
        catch (SQLException se)
        {
        	se.printStackTrace();
            //#CM566499
            //6006002 = Database error occurred.{0}
            RmiMsgLogClient.write( new TraceHandler(6006002, se), "StorageStockFinder" ) ;
            throw (new ReadWriteException("6006002" + wDelim + "DMSTORAGE and DNINVENTORYCHECK")) ;
        }
        return count;
	}
	
	//#CM566500
	/**
	 * This method acquires shelf No. which exists in both tables the DMSTOCK table and DNINVENTORYCHECK. 
     * @param key Key for retrieval
     * @return int Number of retrieval results
     * @throws ReadWriteException Notify the exception generated by the connection with the data base as it is. 
     * @throws ScheduleException It is notified when Exception not anticipated in the check processing is generated. 
	 */
	public int searchLocation(StorageSupportParameter parameter)  throws ReadWriteException, ScheduleException
	{
		int count = 0;		
		ResultSet countSet = null;
		this.wSearchCondition = 2;
        try
        {	
			
			StringBuffer countConsignorSQL = new StringBuffer();
			String coutSql = "SELECT COUNT(*) AS COUNT FROM (SELECT DMSTOCK.LOCATION_NO FROM DMSTOCK WHERE DMSTOCK.STATUS_FLAG = '2' AND DMSTOCK.STOCK_QTY > 0 ";
			String selectSql = "SELECT DMSTOCK.LOCATION_NO FROM DMSTOCK WHERE DMSTOCK.STATUS_FLAG = '2' AND DMSTOCK.STOCK_QTY > 0";
			
			if(parameter.getAreaTypeFlag().equals(StorageSupportParameter.AREA_TYPE_FLAG_NOASRS)){
				AreaOperator AreaOperator = new AreaOperator(wConn);
				
				String[] areaNo = null;
				String areaSQL = "";
				int[] areaType = new int[2];
				areaType[0] = Area.SYSTEM_DISC_KEY_WMS;
				areaType[1] = Area.SYSTEM_DISC_KEY_IDM;
				
				//#CM566501
				// Acquire the areas other than ASRS, and add to the search condition. 
				//#CM566502
				// IS NULL retrieval when there is no pertinent area
				areaNo = AreaOperator.getAreaNo(areaType);
				if (areaNo != null)
				{
					for (int i = 0 ; i < areaNo.length ; i++)
					{
						if (i == 0)
						{
							areaSQL = " AND ( DMSTOCK.AREA_NO = '" + areaNo[i] + "' ";
						}
						else
						{
							areaSQL += " OR DMSTOCK.AREA_NO = '" + areaNo[i] + "' ";
						}
						
					}
					
					if (!StringUtil.isBlank(areaSQL))
					{
						areaSQL += " ) ";
						countConsignorSQL.append(areaSQL);
					}
				}
				else
				{
					countConsignorSQL.append(" AND DMSTOCK.AREA_NO IS NULL ");
				}
			}
			
			//#CM566503
			// Consignor Code
			if (!StringUtil.isBlank(parameter.getConsignorCode()))
			{
				countConsignorSQL.append("AND DMSTOCK.CONSIGNOR_CODE LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getConsignorCode().replace('*','%')));
			}
			//#CM566504
			// Shelf No.
			if (!StringUtil.isBlank(parameter.getLocation()))
			{
				countConsignorSQL.append("AND DMSTOCK.LOCATION_NO LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getLocation().replace('*','%')));
			}
			
			if (!StringUtil.isBlank(parameter.getFromLocation()))
			{
				countConsignorSQL.append("AND DMSTOCK.LOCATION_NO LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getFromLocation().replace('*','%')));
			}
			if (!StringUtil.isBlank(parameter.getToLocation()))
			{
				countConsignorSQL.append("AND DMSTOCK.LOCATION_NO LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getToLocation().replace('*','%')));
			}
			
			
			//#CM566505
			// Consolidate the DMSTOCK table by Shelf No.
			countConsignorSQL.append(" GROUP BY DMSTOCK.LOCATION_NO");
			//#CM566506
			// Unite with the DNINVENTORYCHECK table. 
			countConsignorSQL.append(" UNION SELECT DNINVENTORYCHECK.LOCATION_NO FROM DNINVENTORYCHECK WHERE DNINVENTORYCHECK.STATUS_FLAG = '0' ");
			//#CM566507
			// Consignor Code
			if (!StringUtil.isBlank(parameter.getConsignorCode()))
			{
				countConsignorSQL.append("AND DNINVENTORYCHECK.CONSIGNOR_CODE LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getConsignorCode().replace('*','%')));
			}
			//#CM566508
			// Shelf No.
			if (!StringUtil.isBlank(parameter.getLocation()))
			{
				countConsignorSQL.append("AND DNINVENTORYCHECK.LOCATION_NO LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getLocation().replace('*','%')));
			}
			if (!StringUtil.isBlank(parameter.getFromLocation()))
			{
				countConsignorSQL.append("AND DNINVENTORYCHECK.LOCATION_NO LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getFromLocation().replace('*','%')));
			}
			if (!StringUtil.isBlank(parameter.getToLocation()))
			{
				countConsignorSQL.append("AND DNINVENTORYCHECK.LOCATION_NO LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getToLocation().replace('*','%')));
			}
			//#CM566509
			// Consolidate the DNINVENTRPYCHECK table by Shelf No.
			countConsignorSQL.append(" GROUP BY DNINVENTORYCHECK.LOCATION_NO ");
			
			System.out.println(coutSql + countConsignorSQL.toString()+")");
			
        	countSet = wStatement.executeQuery(coutSql + countConsignorSQL.toString()+")");
        	
        	while (countSet.next())
			{
				count = countSet.getInt("COUNT");
			}
			//#CM566510
			//Execute the retrieval when the number of cases is only MAXDISP or less. 
			if ( count <= DatabaseFinder.MAXDISP )
			{					
				System.out.println(selectSql + countConsignorSQL.toString()+ "ORDER BY LOCATION_NO");
				//#CM566511
				//QUERY is executed. 
				wResultSet = wStatement.executeQuery(selectSql + countConsignorSQL.toString()+ "ORDER BY LOCATION_NO");
			}
			else
			{
				wResultSet = null;
			}
        		
        }
        catch (SQLException se)
        {
        	se.printStackTrace();
            //#CM566512
            //6006002 = Database error occurred.{0}
            RmiMsgLogClient.write( new TraceHandler(6006002, se), "StorageStockFinder" ) ;
            throw (new ReadWriteException("6006002" + wDelim + "DMSTORAGE and DNINVENTORYCHECK")) ;
        }
        return count;
	}	
	
	
	//#CM566513
	/**
	 * Join Item Code which exists in both DMSTOCK and DNINVENTORYCHECK tables of this method with the brand name and acquire it. 
     * @param key Key for retrieval
     * @return int Number of retrieval results
     * @throws ReadWriteException Notify the exception generated by the connection with the data base as it is. 
     * @throws ScheduleException It is notified when Exception not anticipated in the check processing is generated. 
	 */
	public int searchItem(StorageSupportParameter parameter)  throws ReadWriteException, ScheduleException
	{
		int count = 0;		
		ResultSet countSet = null;
		this.wSearchCondition = 3;
        try
        {	
			
			StringBuffer countConsignorSQL = new StringBuffer();
			String coutSql = "SELECT COUNT(*) AS COUNT FROM (SELECT DMSTOCK.ITEM_CODE,DMSTOCK.ITEM_NAME1 FROM DMSTOCK WHERE DMSTOCK.STATUS_FLAG = '2' AND DMSTOCK.STOCK_QTY > 0 ";
			String selectSql = "SELECT DMSTOCK.ITEM_CODE,DMSTOCK.ITEM_NAME1 FROM DMSTOCK WHERE DMSTOCK.STATUS_FLAG = '2' AND DMSTOCK.STOCK_QTY > 0 ";
			
			if(parameter.getAreaTypeFlag().equals(StorageSupportParameter.AREA_TYPE_FLAG_NOASRS)){
				AreaOperator AreaOperator = new AreaOperator(wConn);
				
				String[] areaNo = null;
				String areaSQL = "";
				int[] areaType = new int[2];
				areaType[0] = Area.SYSTEM_DISC_KEY_WMS;
				areaType[1] = Area.SYSTEM_DISC_KEY_IDM;
				
				//#CM566514
				// Acquire the areas other than ASRS, and add to the search condition. 
				//#CM566515
				// IS NULL retrieval when there is no pertinent area
				areaNo = AreaOperator.getAreaNo(areaType);
				if (areaNo != null)
				{
					for (int i = 0 ; i < areaNo.length ; i++)
					{
						if (i == 0)
						{
							areaSQL = " AND ( DMSTOCK.AREA_NO = '" + areaNo[i] + "' ";
						}
						else
						{
							areaSQL += " OR DMSTOCK.AREA_NO = '" + areaNo[i] + "' ";
						}
						
					}
					
					if (!StringUtil.isBlank(areaSQL))
					{
						areaSQL += " ) ";
						countConsignorSQL.append(areaSQL);
					}
				}
				else
				{
					countConsignorSQL.append(" AND DMSTOCK.AREA_NO IS NULL ");
				}
			}
			
			//#CM566516
			// Consignor Code
			if (!StringUtil.isBlank(parameter.getConsignorCode()))
			{
				countConsignorSQL.append(" AND DMSTOCK.CONSIGNOR_CODE = ");
				countConsignorSQL.append("'"+parameter.getConsignorCode()+"'");
			}
			//#CM566517
			// Start Shelf No.
			if (!StringUtil.isBlank(parameter.getFromLocation()))
			{
				countConsignorSQL.append(" AND DMSTOCK.LOCATION_NO >= ");
				countConsignorSQL.append("'"+parameter.getFromLocation()+"'");
			}			
			
			//#CM566518
			// End Shelf No.
			if (!StringUtil.isBlank(parameter.getToLocation()))
			{
				countConsignorSQL.append(" AND DMSTOCK.LOCATION_NO <= ");
				countConsignorSQL.append("'"+parameter.getToLocation()+"'");
			}
			
			//#CM566519
			// Item Code
			if (!StringUtil.isBlank(parameter.getItemCode()))
			{
				countConsignorSQL.append("AND DMSTOCK.ITEM_CODE LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getItemCode().replace('*','%')));
			}
			
			//#CM566520
			// Consolidate the DMSTOCK table by Item Code and the brand name. 
			countConsignorSQL.append(" GROUP BY DMSTOCK.ITEM_CODE,DMSTOCK.ITEM_NAME1");
			//#CM566521
			// Unite with the DMINVENTORYCHECK table. 
			countConsignorSQL.append(" UNION SELECT DNINVENTORYCHECK.ITEM_CODE,DNINVENTORYCHECK.ITEM_NAME1  FROM DNINVENTORYCHECK WHERE DNINVENTORYCHECK.STATUS_FLAG = '0' ");
			//#CM566522
			// Consignor Code
			if (!StringUtil.isBlank(parameter.getConsignorCode()))
			{
				countConsignorSQL.append(" AND DNINVENTORYCHECK.CONSIGNOR_CODE = ");
				countConsignorSQL.append("'"+parameter.getConsignorCode()+"'");
			}
			//#CM566523
			// Start Shelf No.
			if (!StringUtil.isBlank(parameter.getFromLocation()))
			{
				countConsignorSQL.append(" AND DNINVENTORYCHECK.LOCATION_NO >= ");
				countConsignorSQL.append("'"+parameter.getFromLocation()+"'");
			}
			
			//#CM566524
			// End Shelf No.
			if (!StringUtil.isBlank(parameter.getToLocation()))
			{
				countConsignorSQL.append(" AND DNINVENTORYCHECK.LOCATION_NO <= ");
				countConsignorSQL.append("'"+parameter.getToLocation()+"'");
			}
			
			//#CM566525
			// Item Code
			if (!StringUtil.isBlank(parameter.getItemCode()))
			{
				countConsignorSQL.append("AND DNINVENTORYCHECK.ITEM_CODE LIKE ");
				countConsignorSQL.append(DBFormat.format(parameter.getItemCode().replace('*','%')));
			}
			//#CM566526
			// Consolidate the DNINVENTORYCHECK table by Item Code and the name. 
			countConsignorSQL.append(" GROUP BY DNINVENTORYCHECK.ITEM_CODE,DNINVENTORYCHECK.ITEM_NAME1 ");
			
			System.out.println(coutSql + countConsignorSQL.toString()+")");
			
        	countSet = wStatement.executeQuery(coutSql + countConsignorSQL.toString()+")");
        	
        	while (countSet.next())
			{
				count = countSet.getInt("COUNT");
			}
			//#CM566527
			//Execute the retrieval when the number of cases is only MAXDISP or less. 
			if ( count <= DatabaseFinder.MAXDISP )
			{					
				System.out.println(selectSql + countConsignorSQL.toString()+ "ORDER BY ITEM_CODE,ITEM_NAME1");
				wResultSet = wStatement.executeQuery(selectSql + countConsignorSQL.toString()+ "ORDER BY ITEM_CODE,ITEM_NAME1");
			}
			else
			{
				wResultSet = null;
			}
        		
        }
        catch (SQLException se)
        {
        	se.printStackTrace();
            //#CM566528
            //6006002 = Database error occurred.{0}
            RmiMsgLogClient.write( new TraceHandler(6006002, se), "StorageStockFinder" ) ;
            throw (new ReadWriteException("6006002" + wDelim + "DMSTORAGE and DNINVENTORYCHECK")) ;
        }
        return count;
	}	
	
	//#CM566529
	/**
	 * Make the retrieval result of the data base an entity array and return it. 
	 * @param Starting position for which retrieval result is specified
	 * @param End position in which retrieval result was specified
	 * @return Entity array
 	 * @throws ReadWriteException Notify the exception generated by the database connection as it is. 
	 */
	public Entity[] getEntities(int start, int end) throws ReadWriteException
	{	 
		Vector vec=new Vector();
		Stock[] vStock = null; 
		
		try {
			//#CM566530
			// Display qty
			int count = end - start;
			if (wResultSet.absolute(start+1))
			{
				for (int i = 0; i < count; i++)
				{
						if(i > 0)
						{
							wResultSet.next();
						}

						Stock temp = new Stock() ;
						switch(wSearchCondition)
						{
							case 1:
								temp.setConsignorCode(DBFormat.replace(wResultSet.getString("CONSIGNOR_CODE")));
								temp.setConsignorName(DBFormat.replace(wResultSet.getString("CONSIGNOR_NAME")));
								break;
							case 2:	
								temp.setLocationNo(DBFormat.replace(wResultSet.getString("LOCATION_NO")));
								break;
							case 3:
								temp.setItemCode(DBFormat.replace(wResultSet.getString("ITEM_CODE")));
								temp.setItemName1(DBFormat.replace(wResultSet.getString("ITEM_NAME1")));
								break;
							case 4:
								//#CM566531
								// For stock list of stock movement
								temp.setConsignorCode(DBFormat.replace(wResultSet.getString("CONSIGNOR_CODE")));
								temp.setItemCode(DBFormat.replace(wResultSet.getString("ITEM_CODE")));
								temp.setLocationNo(DBFormat.replace(wResultSet.getString("LOCATION_NO")));
								temp.setUseByDate(DBFormat.replace(wResultSet.getString("USE_BY_DATE")));
								break;
						}
						vec.addElement(temp);
				}
				vStock = new Stock[vec.size()];
				vec.copyInto(vStock);
			}
			else
			{
				//#CM566532
				// The specified line is not correct. 
				RmiMsgLogClient.write(6006010, LogMessage.F_ERROR, "StockFinder", null);
				throw new ReadWriteException("6006010");
			}
		}		
		catch (SQLException e)
		{
			//#CM566533
			//6006002 = Database error occurred.{0}
			RmiMsgLogClient.write( new TraceHandler(6006002, e), "StockFinder" ) ;
			throw (new ReadWriteException("6006002" + wDelim + "DnStock")) ;
		}
	
		return vStock;
	}    
	
	public int search(SearchKey key) throws ReadWriteException
	{
		return 0;
	}
}
