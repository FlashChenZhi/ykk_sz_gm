// $Id: TicketNoItemStorageInfoBusiness.java,v 1.2 2007/12/25 03:46:14 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Inquiry;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.bluedog.webapp.ForwardParameters;
import jp.co.daifuku.common.MessageResource;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.DBHandler.DBHandler;
import jp.co.daifuku.wms.YkkGMAX.Entities.ItemViewEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.TicketNoItemStorageInfoEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.TicketNoItemStorageInfoHead;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.fileexporter.CSVGenerator;
import jp.co.daifuku.wms.YkkGMAX.fileexporter.TicketNoItemStorageInfoCSV;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"><TD>Date</TD><TD>Name</TD><TD>Comment</TD></TR>
 * <TR><TD>2004/02/13</TD><TD>N.Sawa(DFK)</TD><TD>created this class</TD></TR>
 * </TABLE>
 * <BR>
 * @version $Revision: 1.2 $, $Date: 2007/12/25 03:46:14 $
 * @author  $Author: administrator $
 */
public class TicketNoItemStorageInfoBusiness extends TicketNoItemStorageInfo implements WMSConstants
{
	// Class fields --------------------------------------------------

	// Class variables -----------------------------------------------

	// Class method --------------------------------------------------

	// Constructors --------------------------------------------------

	// Public methods ------------------------------------------------

	private final String DIALOG_FLAG = "DIALOG_FLAG";
	private final String INQUIRY_MODE = "INQUIRY_MODE";
	private final String TICKET_NO_ITEM_STORAGE_INFO_HEAD = "TICKET_NO_ITEM_STORAGE_INFO_HEAD";
	private final String ITEM_CODE = "ITEM_CODE";
	private final String ITEM_NAME_1 = "ITEM_NAME_1";
	private final String ITEM_NAME_2 = "ITEM_NAME_2";
	private final String ITEM_NAME_3 = "ITEM_NAME_3";
	private final String MANAGE_ITEM_FLAG = "MANAGE_ITEM_FLAG";
	/**
	 * Initializes the screen.
	 * @param e ActionEvent
	 * @throws Exception
	 */
	public void page_Load(ActionEvent e) throws Exception
	{
		txt_ItemCode.setReadOnly(true);
		btn_ItemBrowse.setEnabled(false);
		txt_ColorCode.setReadOnly(true);
		txt_InquiryRangeTo.setReadOnly(true);
		txt_BucketNo.setReadOnly(true);
		InitSession();
	}

	private void InitSession()
	{
		session.setAttribute(TICKET_NO_ITEM_STORAGE_INFO_HEAD, new TicketNoItemStorageInfoHead());
		
		session.setAttribute(ITEM_CODE, null);

		session.setAttribute(MANAGE_ITEM_FLAG, null);
		
		session.setAttribute(INQUIRY_MODE, "1");
	}

	/**
	 * Refered before calling each control event.
	 * @param e ActionEvent
	 * @throws Exception
	 */
	public void page_Initialize(ActionEvent e) throws Exception
	{
		String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
		if (menuparam != null)
		{
		    // #CM37828
		    // fetch parameter
		    String title = CollectionUtils.getMenuParam(0, menuparam);
		    String functionID = CollectionUtils.getMenuParam(1, menuparam);
		    String menuID = CollectionUtils.getMenuParam(2, menuparam);
		    // #CM37829
		    // save to viewstate
		    this.getViewState().setString(M_TITLE_KEY, title);
		    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
		    this.getViewState().setString(M_MENUID_KEY, menuID);
		    // #CM37830
		    // set screen name
		    // lbl_SettingName.setResourceKey(title);
		}
	}

	// Package methods -----------------------------------------------

	// Protected methods ---------------------------------------------

	// Private methods -----------------------------------------------

	// Event handler methods -----------------------------------------
	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_SettingName_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Help_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void tab_Click(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_ToMenu_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_ToMenu_Click(ActionEvent e) throws Exception
	{
		forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
				.getString(M_MENUID_KEY)));
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Division_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void rdo_TicketNo_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void rdo_TicketNo_Click(ActionEvent e) throws Exception
	{
		txt_ItemCode.setReadOnly(true);
		btn_ItemBrowse.setEnabled(false);
		txt_ColorCode.setReadOnly(true);
		txt_BucketNo.setReadOnly(true);
		txt_InquiryRangeFrom.setReadOnly(false);
		if(chk_RangeSet.getChecked())
		{
			txt_InquiryRangeTo.setReadOnly(false);
		}
		else
		{
			txt_InquiryRangeTo.setReadOnly(true);
		}
		chk_RangeSet.setEnabled(true);
		session.setAttribute(INQUIRY_MODE, "1");
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void rdo_ItemCode_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void rdo_ItemCode_Click(ActionEvent e) throws Exception
	{
		txt_ItemCode.setReadOnly(false);
		btn_ItemBrowse.setEnabled(true);
		txt_ColorCode.setReadOnly(false);
		txt_BucketNo.setReadOnly(true);
		txt_InquiryRangeFrom.setReadOnly(true);
		txt_InquiryRangeTo.setReadOnly(true);
		chk_RangeSet.setEnabled(false);
		session.setAttribute(INQUIRY_MODE, "2");
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_InquiryRange_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeFrom_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeFrom_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeFrom_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeFrom_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeFrom_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeFrom_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_to_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeTo_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeTo_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeTo_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeTo_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeTo_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_InquiryRangeTo_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void chk_RangeSet_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void chk_RangeSet_Change(ActionEvent e) throws Exception
	{
		txt_InquiryRangeTo.setReadOnly(!chk_RangeSet.getChecked());
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Show_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Show_Click(ActionEvent e) throws Exception
	{
		setHeadSession();
		redirect("/YkkGMAX/Inquiry/TicketNoItemStorageInfoPopup.do", null, "/progress.do");
	}

	private void setHeadSession()
	{
		TicketNoItemStorageInfoHead head = new TicketNoItemStorageInfoHead();
		head.setDepo(pul_Depository.getSelectedValue());
		if(rdo_TicketNo.getChecked())
		{
			head.setTicketNoFrom(txt_InquiryRangeFrom.getText());
			if(chk_RangeSet.getChecked())
			{
				head.setRangeSet(true);
				head.setTicketNoTo(txt_InquiryRangeTo.getText());
			}
			else
			{
				head.setRangeSet(false);
			}
			head.setDivision("生产传票");
		}
		else if(rdo_ItemCode.getChecked())
		{
			head.setItemCode(txt_ItemCode.getText());
			head.setColorCode(txt_ColorCode.getText());
			head.setDivision("物料编号");
		}
		else
		{
			head.setBucketNo(txt_BucketNo.getText());
			head.setDivision("箱子编号");
		}
		session.setAttribute(TICKET_NO_ITEM_STORAGE_INFO_HEAD, head);
		
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Print_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Print_Click(ActionEvent e) throws Exception
	{
		setHeadSession();
		TicketNoItemStorageInfoHead head = (TicketNoItemStorageInfoHead)session.getAttribute(TICKET_NO_ITEM_STORAGE_INFO_HEAD);
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getConnection();
			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			int count = centre.getTicketNoItemStorageInfoCount(head);
			
			setConfirm("YKK-LBL-PrintConfirm" + MessageResource.DELIM + String.valueOf(count));
			getViewState().setBoolean(DIALOG_FLAG, true);
		}

		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqle)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}
	
	public void page_ConfirmBack(ActionEvent e) throws Exception
	{

		if (!this.getViewState().getBoolean(DIALOG_FLAG))
		{
			return;
		}
		boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
				.booleanValue();
		if (!isExecute)
		{
			return;
		}
		message.setMsgResourceKey("7000034");
		Connection conn = null;
		try
		{
			conn = ConnectionManager.getConnection();
			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			String printerName = centre.getPrinterName(getHttpRequest()
					.getRemoteAddr());
			String listKey = centre.generateLabelKey();

			TicketNoItemStorageInfoHead head = (TicketNoItemStorageInfoHead) session
					.getAttribute(TICKET_NO_ITEM_STORAGE_INFO_HEAD);

			String sqlString = "INSERT INTO FNPRINTHEAD (listkey,proc_flag,printer_name,listtype,order_flag,range1,range2,range3,range4,range5)VALUES("
					+ StringUtils.surroundWithSingleQuotes(listKey)
					+ ","
					+ StringUtils.surroundWithSingleQuotes("0")
					+ ","
					+ StringUtils.surroundWithSingleQuotes(printerName)
					+ ","
					+ StringUtils.surroundWithSingleQuotes("4")
					+ ","
					+ StringUtils.surroundWithSingleQuotes("0")
					+ ","
					+ StringUtils.surroundWithSingleQuotes(head.getDepo())
					+ ","
					+ StringUtils.surroundWithSingleQuotes(head.getDivision())
					+ ",";
			String ticketNoRange = "";
			if(head.isRangeSet())
			{
				ticketNoRange = head.getTicketNoFrom() + "～" + head.getTicketNoTo();
			}
			else
			{
				ticketNoRange = head.getTicketNoFrom();
			}
			sqlString +=  StringUtils.surroundWithSingleQuotes(ticketNoRange)
					+ ","
					+ StringUtils.surroundWithSingleQuotes(head.getItemCode() + " " + head.getColorCode())
					+ ","
					+ StringUtils.surroundWithSingleQuotes(head.getBucketNo())
					+ ")";
			DBHandler handler = new DBHandler(conn);
			handler.executeUpdate(sqlString, true);

			List entityList = centre.getTicketNoItemStorageInfoList(head);

			for (int i = 0; i < entityList.size(); i++)
			{
				TicketNoItemStorageInfoEntity entity = (TicketNoItemStorageInfoEntity) entityList
						.get(i);

				sqlString = "INSERT INTO FNPRINTBODY (listKey,range1,range2,range3,range4,range5,range6,range7,range8)VALUES("
						+ StringUtils.surroundWithSingleQuotes(listKey)
						+ ","
						+ StringUtils
								.surroundWithSingleQuotes(entity.getTicketNo())
						+ ","
						+ StringUtils.surroundWithSingleQuotes(entity.getItemCode())
						+ ","
						+ StringUtils.surroundWithSingleQuotes(entity
								.getItemName1()
								+ StringUtils.nextRow
								+ entity.getItemName2()
								+ StringUtils.nextRow + entity.getItemName3())
						+ ","
						+ StringUtils.surroundWithSingleQuotes(entity
								.getColor())
						+ ","
						+ StringUtils.surroundWithSingleQuotes(StringUtils.formatLocationNoFromDBToPage(entity.getLocationNo()))
						+ ","
						+ StringUtils.surroundWithSingleQuotes(entity.getBucketNo())
						+ ","
						+ StringUtils.surroundWithSingleQuotes(DecimalFormat.getIntegerInstance()
								.format(entity.getInstockCount()))
						+ ","
						+ StringUtils.surroundWithSingleQuotes(StringUtils.formatDateAndTimeFromDBToPage(entity.getMessageDateTime()))
						+ ")";
				handler = new DBHandler(conn);
				handler.executeUpdate(sqlString, true);

			}
			message.setMsgResourceKey("7000017");
			conn.commit();
		}

		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
			try
			{
				if (conn != null)
				{
					conn.rollback();
				}
			}
			catch (SQLException ex)
			{
				DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
				message.setMsgResourceKey("7200002");
			}
		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
			try
			{
				if (conn != null)
				{
					conn.rollback();
				}
			}
			catch (SQLException ex)
			{
				DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
				message.setMsgResourceKey("7200002");
			}
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqle)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}
	
	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_CSV_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_CSV_Click(ActionEvent e) throws Exception
	{
		setHeadSession();
		String root = getServletContext().getRealPath("/csv");
		CSVGenerator generator = new CSVGenerator(new TicketNoItemStorageInfoCSV(
				this), root);
		try
		{
			String path = generator.generateFile(message);
			if (path.equals(""))
			{
				return;
			}
			viewState.setString("file", path);
			addOnloadScript("slb_Download.click();");
		}
		catch (Exception ex)
		{
			DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
			message.setMsgResourceKey("7500001");
			List paramList = new ArrayList();
			paramList.add(ex.getMessage());
			message.setMsgParameter(paramList);
		}
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Clear_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_Clear_Click(ActionEvent e) throws Exception
	{
		ClearPage();
	}

	private void ClearPage()
	{
		rdo_TicketNo.setChecked(true);
		chk_RangeSet.setEnabled(true);
		txt_InquiryRangeFrom.setReadOnly(false);
		session.setAttribute(INQUIRY_MODE, "1");
		pul_Depository.setSelectedIndex(0);
		txt_InquiryRangeFrom.setText("");
		txt_InquiryRangeTo.setText("");
		txt_InquiryRangeTo.setReadOnly(true);
		chk_RangeSet.setChecked(false);
		txt_ItemCode.setText("");
		txt_ItemCode.setReadOnly(true);
		btn_ItemBrowse.setEnabled(false);
		txt_ItemName1.setText("");
		txt_ItemName2.setText("");
		txt_ItemName3.setText("");
		txt_ColorCode.setText("");
		txt_ColorCode.setReadOnly(true);
		
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Depository_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void pul_Depository_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void pul_Depository_Change(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_ItemCode_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemCode_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemCode_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemCode_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemCode_EnterKey(ActionEvent e) throws Exception
	{
		ValidateControl();
		FillItemName();
	}

	private void ValidateControl() throws ValidateException
	{
		setFocus(txt_ItemCode);
		txt_ItemCode.validate();
		setFocus(null);
	}
	
	private void FillItemName()
	{
		Connection conn = null;

		try
		{
			conn = ConnectionManager.getConnection();

			ASRSInfoCentre centre = new ASRSInfoCentre(conn);

			List itemNameList = centre.getItemNameList(txt_ItemCode.getText());
			
			txt_ItemName1.setText("");
			txt_ItemName2.setText("");
			txt_ItemName3.setText("");
			
			if (itemNameList.size() > 0)
			{
				ItemViewEntity entity = (ItemViewEntity) itemNameList.get(0);

				txt_ItemName1.setText(entity.getItemName1());
				txt_ItemName2.setText(entity.getItemName2());
				txt_ItemName3.setText(entity.getItemName3());
			}
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);

		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
		finally
		{
			if (conn != null)
			{
				try
				{
					conn.close();
				}
				catch (SQLException sqle)
				{
					DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
					message.setMsgResourceKey("7200002");
				}
			}
		}
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemCode_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemCode_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_ItemName_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName1_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName1_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName1_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName1_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName1_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName1_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName2_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName2_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName2_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName2_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName2_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName2_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName3_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName3_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName3_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName3_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName3_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ItemName3_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_ColorCode_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ColorCode_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ColorCode_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ColorCode_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ColorCode_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ColorCode_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_ColorCode_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_ItemBrowse_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void btn_ItemBrowse_Click(ActionEvent e) throws Exception
	{
		session.setAttribute(ITEM_CODE, txt_ItemCode.getText());

		session.setAttribute(MANAGE_ITEM_FLAG, null);

		redirect("/YkkGMAX/Popup/ItemView.do", null, "/progress.do");
	}
	
	public void page_DlgBack(ActionEvent e) throws Exception
	{
		((DialogEvent) e).getDialogParameters();

		if (session.getAttribute(ITEM_CODE) != null)
		{
			txt_ItemCode.setText((String) session.getAttribute(ITEM_CODE));
			txt_ItemName1.setText((String)session.getAttribute(ITEM_NAME_1));
			txt_ItemName2.setText((String)session.getAttribute(ITEM_NAME_2));
			txt_ItemName3.setText((String)session.getAttribute(ITEM_NAME_3));
			session.setAttribute(ITEM_CODE, null);
		}
		
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Star1_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Star2_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void rdo_BucketNo_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void rdo_BucketNo_Click(ActionEvent e) throws Exception
	{
		txt_ItemCode.setReadOnly(true);
		btn_ItemBrowse.setEnabled(false);
		txt_ColorCode.setReadOnly(true);
		txt_BucketNo.setReadOnly(false);
		txt_InquiryRangeFrom.setReadOnly(true);
		txt_InquiryRangeTo.setReadOnly(true);
		chk_RangeSet.setEnabled(false);
		session.setAttribute(INQUIRY_MODE, "3");
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_BucketNo_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void lbl_Star3_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_BucketNo_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_BucketNo_AutoCompleteItemClick(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_BucketNo_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_BucketNo_EnterKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_BucketNo_TabKey(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void txt_BucketNo_InputComplete(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void slb_Download_Server(ActionEvent e) throws Exception
	{
	}

	/** 
	 * 
	 * @param e ActionEvent 
	 * @throws Exception 
	 */
	public void slb_Download_Click(ActionEvent e) throws Exception
	{
		String path = viewState.getString("file");
		
		ForwardParameters param = new ForwardParameters();
		param.addParameter("file", path);
		
		redirect("/jsp/SheetDownLoadDummy.jsp",param);
	}


}
//end of class
