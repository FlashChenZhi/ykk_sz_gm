// $Id: ExternalStockoutBusiness.java,v 1.5 2007/12/30 05:17:36 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Stockout;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.ExternalStockoutEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.RetrievalPlankeySortable;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListHandler.RetrievalPlankeySortableHandler;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.ExternalStockoutListProxy;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.resident.AfterRservationDataDeleteRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.AfterStockoutRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ExternalRsvDataDeleteProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ExternalStockoutAutoRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ExternalStockoutDesignateRequestProcessor;
import jp.co.daifuku.wms.YkkGMAX.resident.ProcessorInvoker;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.5 $, $Date: 2007/12/30 05:17:36 $
 * @author $Author: administrator $
 */
public class ExternalStockoutBusiness extends ExternalStockout implements
		WMSConstants
{
	// Class fields --------------------------------------------------

	// Class variables -----------------------------------------------

	// Class method --------------------------------------------------

	// Constructors --------------------------------------------------

	// Public methods ------------------------------------------------

	private static class rowComparator implements Comparator
	{
		public int compare(Object o1, Object o2)
		{
			return Integer.valueOf(o2.toString()).compareTo(
					Integer.valueOf(o1.toString()));
		}
	}

	private final String SETTING_DIALOG_FLAG = "SETTING_DIALOG_FLAG";

	private final String DIALOG_FLAG2 = "DIALOG_FLAG2";

	private final String DESIGNATE_LOCATION_COUNT = "DESIGNATE_LOCATION_COUNT";

	private final String AUTO_LIST = "AUTO_LIST";

	private final String DESIGNATE_LOCATION_LIST = "DESIGNATE_LOCATION_LIST";

	private final String EXTERNAL_STOCKOUT_VIEW_LIST = "EXTERNAL_STOCKOUT_VIEW_LIST";

	private final String DIALOG_FLAG = "DIALOG_FLAG";

	private final ExternalStockoutListProxy listProxy = new ExternalStockoutListProxy(
			lst_ExternalStockout, this);

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Delete_Click(ActionEvent e) throws Exception
	{
		InitDlg();
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList manuList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);
		if (autoList.size() <= 0 && manuList.size() <= 0)
		{
			message.setMsgResourceKey("7000024");
			return;
		}

		if (txt_StockOutDeletionPassword.getText().trim().equals(""))
		{
			message.setMsgResourceKey("8000196");
			setFocus(txt_StockOutDeletionPassword);
			return;
		}
		else if (!txt_StockOutDeletionPassword.getText().equals("20121118"))
		{
			message.setMsgResourceKey("8000197");
			setFocus(txt_StockOutDeletionPassword);
			return;
		}

		txt_StockOutDeletionPassword.setText("");
		setConfirm("YKK-LBL-DeleteConfirm");
		getViewState().setBoolean(DIALOG_FLAG2, true);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Delete_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Help_Server(ActionEvent e) throws Exception
	{
	}

	// Package methods -----------------------------------------------

	// Protected methods ---------------------------------------------

	// Private methods -----------------------------------------------

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Input_Click(ActionEvent e) throws Exception
	{
		ValidateCheck();
		try
		{
			ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
			listProxy.InputRowEntities(txt_RetrievalNo.getText(), autoList,
					message, 1);
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);

		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Input_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Input2_Click(ActionEvent e) throws Exception
	{
		ValidateCheck2();
		try
		{
			ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
			listProxy.InputRowEntities(txt_OrderNo.getText(), autoList,
					message, 2);
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);

		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Input2_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Release_Click(ActionEvent e) throws Exception
	{

		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);

		ArrayList manuList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);

		ArrayList removeRows = new ArrayList();
		for (int j = 0; j < autoList.size(); j++)
		{
			RetrievalPlankeySortable entity = (RetrievalPlankeySortable) autoList
					.get(j);
			for (int i = 1; i < lst_ExternalStockout.getMaxRows(); i++)
			{
				lst_ExternalStockout.setCurrentRow(i);
				if (entity.getRetrievalPlankey().equals(
						listProxy.getRetrievalPlankey()))
				{
					removeRows.add(String.valueOf(i));
				}
			}
		}
		for (int j = 0; j < manuList.size(); j++)
		{
			RetrievalPlankeySortable entity = (RetrievalPlankeySortable) manuList
					.get(j);
			for (int i = 1; i < lst_ExternalStockout.getMaxRows(); i++)
			{
				lst_ExternalStockout.setCurrentRow(i);
				if (entity.getRetrievalPlankey().equals(
						listProxy.getRetrievalPlankey()))
				{
					removeRows.add(String.valueOf(i));
				}
			}
		}

		Comparator comparator = new rowComparator();
		Collections.sort(removeRows, comparator);

		for (int i = 0; i < removeRows.size(); i++)
		{
			int row = Integer.parseInt(removeRows.get(i).toString());
			lst_ExternalStockout.removeRow(row);
		}
		autoList.clear();
		manuList.clear();
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Release_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Low_Click(ActionEvent e) throws Exception
	{
		btn_Set_Up_Click(null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Low_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Up_Click(ActionEvent e) throws Exception
	{
		session.setAttribute(SETTING_DIALOG_FLAG, "1");
		session.setAttribute(EXTERNAL_STOCKOUT_VIEW_LIST, null);
		ArrayList designateStockoutEntityList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);
		if (designateStockoutEntityList.size() > 0)
		{
			redirect("/YkkGMAX/Stockout/ExternalStockoutPopup.do", null,
					"/progress.do");
		}
		else
		{
			redirect("/YkkGMAX/Stockout/ExternalStockoutPopup.do", null);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Set_Up_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_ToMenu_Click(ActionEvent e) throws Exception
	{
		forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
				.getString(M_MENUID_KEY)));
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_ToMenu_Server(ActionEvent e) throws Exception
	{
	}

	private void InitDlg()
	{
		this.getViewState().setBoolean(DIALOG_FLAG, false);
		this.getViewState().setBoolean(DIALOG_FLAG2, false);
	}

	private void InitSession()
	{
		session.setAttribute(DESIGNATE_LOCATION_COUNT, "0");
		session.setAttribute(AUTO_LIST, new ArrayList());
		session.setAttribute(DESIGNATE_LOCATION_LIST, new ArrayList());
		session.setAttribute(SETTING_DIALOG_FLAG, null);
		session.setAttribute(EXTERNAL_STOCKOUT_VIEW_LIST, null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_OrderNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_RetrievalNo_Server(ActionEvent e) throws Exception
	{
	}

	// Event handler methods -----------------------------------------
	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lbl_SettingName_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_Change(ActionEvent e) throws Exception
	{

		int row = Integer.parseInt(e.getEventArgs().get(0).toString());
		int col = Integer.parseInt(e.getEventArgs().get(1).toString());
		if (col == listProxy.getDESIGNATE_LOCATION_COLUMN())
		{
			OnDesignateLocationCheckBoxChanged(row);
		}
		else if (col == listProxy.getAUTO_COLUMN())
		{
			OnAutoCheckBoxChanged(row);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_ColumClick(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_InputComplete(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_ExternalStockout_TabKey(ActionEvent e) throws Exception
	{
	}

	private void OnAutoCheckBoxChanged(int row)
	{
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList designateLocationList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);

		lst_ExternalStockout.setCurrentRow(row);
		if (listProxy.getAuto())
		{
			if (listProxy.getDesignateLocation())
			{
				listProxy.setDesignateLocation(false);
				RetrievalPlankeySortableHandler.remove(designateLocationList,
						listProxy.getExternalStockoutEntity());
			}
			RetrievalPlankeySortableHandler.insert(autoList, listProxy
					.getExternalStockoutEntity());
		}
		else
		{
			RetrievalPlankeySortableHandler.remove(autoList, listProxy
					.getExternalStockoutEntity());
		}

		session.setAttribute(DESIGNATE_LOCATION_COUNT, String
				.valueOf(designateLocationList.size()));

	}

	private void OnDesignateLocationCheckBoxChanged(int row)
	{
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList designateLocationList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);

		lst_ExternalStockout.setCurrentRow(row);
		if (listProxy.getDesignateLocation())
		{
			// set all designate location checkboxes to unchecked state
			for (int i = 1; i < lst_ExternalStockout.getMaxRows(); ++i)
			{
				lst_ExternalStockout.setCurrentRow(i);
				listProxy.setDesignateLocation(false);
			}

			if (designateLocationList != null)
			{
				designateLocationList.clear();
			}

			lst_ExternalStockout.setCurrentRow(row);
			// is auto checkbox checked ?
			if (listProxy.getAuto())
			{
				// uncheck auto checkbox
				listProxy.setAuto(false);
				RetrievalPlankeySortableHandler.remove(autoList, listProxy
						.getExternalStockoutEntity());
			}

			// check designate location checkbox
			listProxy.setDesignateLocation(true);
			RetrievalPlankeySortableHandler.insert(designateLocationList,
					listProxy.getExternalStockoutEntity());
		}
		else
		{
			RetrievalPlankeySortableHandler.remove(designateLocationList,
					listProxy.getExternalStockoutEntity());
		}

		session.setAttribute(DESIGNATE_LOCATION_COUNT, String
				.valueOf(designateLocationList.size()));
	}

	public void page_ConfirmBack(ActionEvent e) throws Exception
	{
		if (this.getViewState().getBoolean(DIALOG_FLAG))
		{
			boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
					.booleanValue();
			if (!isExecute)
			{
				return;
			}
			message.setMsgResourceKey("7000034");
			ArrayList manuList = (ArrayList) session
					.getAttribute(DESIGNATE_LOCATION_LIST);
			ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);

			ProcessorInvoker pi = new ProcessorInvoker(message);
			if (manuList != null && manuList.size() > 0)
			{
				pi.addProcessor(new ExternalStockoutDesignateRequestProcessor(
						manuList, getUserInfo().getUserId()));
			}
			if (autoList != null && autoList.size() > 0)
			{
				pi.addProcessor(new ExternalStockoutAutoRequestProcessor(
						autoList, getUserInfo().getUserId()));
			}
			if (pi.run())
			{
				pi = new ProcessorInvoker(message);
				pi.addProcessor(new AfterStockoutRequestProcessor());
				pi.run();
			}

			lst_ExternalStockout.clearRow();
			InitSession();
		}

		else if (this.getViewState().getBoolean(DIALOG_FLAG2))
		{
			boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
					.booleanValue();
			if (!isExecute)
			{
				return;
			}
			message.setMsgResourceKey("7000034");
			
			String ip = getHttpRequest().getRemoteAddr();
			List dataList = new ArrayList();
			dataList.addAll((ArrayList) session
					.getAttribute(DESIGNATE_LOCATION_LIST));
			dataList.addAll((ArrayList) session.getAttribute(AUTO_LIST));
			ProcessorInvoker pi = new ProcessorInvoker(message);
			pi.addProcessor(new ExternalRsvDataDeleteProcessor(ip, dataList));
			if (pi.run())
			{
				pi = new ProcessorInvoker(message);
				pi.addProcessor(new AfterRservationDataDeleteRequestProcessor());
				pi.run();
				message.setMsgResourceKey("7000016");
			}
			
			lst_ExternalStockout.clearRow();
			txt_StockOutDeletionPassword.setText("");
			InitSession();
			
			
			
//			Connection conn = null;
//			try
//			{
//				conn = ConnectionManager.getConnection();
//
//				ASRSInfoCentre centre = new ASRSInfoCentre(conn);
//
//				ArrayList manuList = (ArrayList) session
//						.getAttribute(DESIGNATE_LOCATION_LIST);
//				ArrayList autoList = (ArrayList) session
//						.getAttribute(AUTO_LIST);
//
//				String printerName = centre.getPrinterName(getHttpRequest()
//						.getRemoteAddr());
//
//				String listKey = centre.generateLabelKey();
//
//				String sqlString = "INSERT INTO FNPRINTHEAD (listkey,proc_flag,printer_name,listtype,order_flag)VALUES("
//						+ StringUtils.surroundWithSingleQuotes(listKey)
//						+ ","
//						+ StringUtils.surroundWithSingleQuotes("0")
//						+ ","
//						+ StringUtils.surroundWithSingleQuotes(printerName)
//						+ ","
//						+ StringUtils.surroundWithSingleQuotes("9")
//						+ ","
//						+ StringUtils.surroundWithSingleQuotes("0") + ")";
//
//				DBHandler handler = new DBHandler(conn);
//				handler.executeUpdate(sqlString, true);
//
//				boolean rollbackFlag = false;
//				for (int i = 0; i < manuList.size(); i++)
//				{
//					if (rollbackFlag)
//						break;
//					ExternalStockoutEntity entity = (ExternalStockoutEntity) manuList
//							.get(i);
//
//					sqlString = "INSERT INTO FNPRINTBODY (listKey,range1,range2,range3,range4,range5,range6,range7)VALUES("
//							+ StringUtils.surroundWithSingleQuotes(listKey)
//							+ ","
//							+ StringUtils.surroundWithSingleQuotes(entity
//									.getRetrievalNo())
//							+ ","
//							+ StringUtils.surroundWithSingleQuotes(entity
//									.getItemCode())
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(DecimalFormat
//											.getIntegerInstance().format(
//													entity.getStockoutCount()))
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(DecimalFormat
//											.getIntegerInstance().format(
//													entity.getStockoutCount()))
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(StringUtils
//											.formatDateFromDBToPage(entity
//													.getWhenNextWorkBegin())
//											+ " "
//											+ StringUtils
//													.formatStartTimingFlagFromDBToPage(entity
//															.getWhenNextWorkBeginTiming()))
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(StringUtils
//											.formatDateFromDBToPage(entity
//													.getWhenThisWorkFinishInPlan())
//											+ " "
//											+ StringUtils
//													.formatStartTimingFlagFromDBToPage(entity
//															.getWhenThisWorkFinishInPlanTiming()))
//							+ ","
//							+ StringUtils.surroundWithSingleQuotes(entity
//									.getExternalCode()) + ")";
//					handler = new DBHandler(conn);
//					handler.executeUpdate(sqlString, true);
//					int rowCount = centre.deleteRetrieval(entity
//							.getRetrievalPlankey(), 0, 0, 0);
//
//					if (rowCount == 0)
//					{
//						rollbackFlag = true;
//					}
//				}
//				for (int i = 0; i < autoList.size(); i++)
//				{
//					if (rollbackFlag)
//						break;
//					ExternalStockoutEntity entity = (ExternalStockoutEntity) autoList
//							.get(i);
//
//					sqlString = "INSERT INTO FNPRINTBODY (listKey,range1,range2,range3,range4,range5,range6,range7)VALUES("
//							+ StringUtils.surroundWithSingleQuotes(listKey)
//							+ ","
//							+ StringUtils.surroundWithSingleQuotes(entity
//									.getRetrievalNo())
//							+ ","
//							+ StringUtils.surroundWithSingleQuotes(entity
//									.getItemCode())
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(DecimalFormat
//											.getIntegerInstance().format(
//													entity.getStockoutCount()))
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(DecimalFormat
//											.getIntegerInstance().format(
//													entity.getStockoutCount()))
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(StringUtils
//											.formatDateFromDBToPage(entity
//													.getWhenNextWorkBegin())
//											+ " "
//											+ StringUtils
//													.formatStartTimingFlagFromDBToPage(entity
//															.getWhenNextWorkBeginTiming()))
//							+ ","
//							+ StringUtils
//									.surroundWithSingleQuotes(StringUtils
//											.formatDateFromDBToPage(entity
//													.getWhenThisWorkFinishInPlan())
//											+ " "
//											+ StringUtils
//													.formatStartTimingFlagFromDBToPage(entity
//															.getWhenThisWorkFinishInPlanTiming()))
//							+ ","
//							+ StringUtils.surroundWithSingleQuotes(entity
//									.getExternalCode()) + ")";
//					handler = new DBHandler(conn);
//					handler.executeUpdate(sqlString, true);
//					int rowCount = centre.deleteRetrieval(entity
//							.getRetrievalPlankey(), 0, 0, 0);
//
//					if (rowCount == 0)
//					{
//						rollbackFlag = true;
//					}
//				}
//
//				message.setMsgResourceKey("7000016");
//				conn.commit();
//
//				lst_ExternalStockout.clearRow();
//				InitSession();

//			}
//			catch (YKKDBException dbEx)
//			{
//				String msgString = MessageResources.getText(dbEx
//						.getResourceKey());
//				DebugPrinter.print(DebugLevel.ERROR, msgString);
//				message.setMsgResourceKey("7200001");
//				List paramList = new ArrayList();
//				paramList.add(msgString);
//				message.setMsgParameter(paramList);
//				try
//				{
//					if (conn != null)
//					{
//						conn.rollback();
//					}
//				}
//				catch (SQLException ex)
//				{
//					DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
//					message.setMsgResourceKey("7200002");
//				}
//			}
//			catch (YKKSQLException sqlEx)
//			{
//				String msgString = MessageResources.getText(sqlEx
//						.getResourceKey());
//				DebugPrinter.print(DebugLevel.ERROR, msgString);
//				message.setMsgResourceKey("7300001");
//				List paramList = new ArrayList();
//				paramList.add(msgString);
//				message.setMsgParameter(paramList);
//				try
//				{
//					if (conn != null)
//					{
//						conn.rollback();
//					}
//				}
//				catch (SQLException ex)
//				{
//					DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
//					message.setMsgResourceKey("7200002");
//				}
//			}
//			finally
//			{
//				if (conn != null)
//				{
//					try
//					{
//						conn.close();
//					}
//					catch (SQLException sqlex)
//					{
//						DebugPrinter
//								.print(DebugLevel.ERROR, sqlex.getMessage());
//						message.setMsgResourceKey("7200002");
//					}
//				}
//			}
		}
	}

	public void page_DlgBack(ActionEvent e) throws Exception
	{
		((DialogEvent) e).getDialogParameters();

		ArrayList viewList = (ArrayList) session
				.getAttribute(EXTERNAL_STOCKOUT_VIEW_LIST);
		ArrayList autoList = (ArrayList) session.getAttribute(AUTO_LIST);
		ArrayList manuList = (ArrayList) session
				.getAttribute(DESIGNATE_LOCATION_LIST);
		if (viewList != null)
		{
			for (int i = 0; i < viewList.size(); i++)
			{
				ExternalStockoutEntity entity = (ExternalStockoutEntity) viewList
						.get(i);

				boolean hasInputed = false;

				for (int j = 1; j < lst_ExternalStockout.getMaxRows(); j++)
				{
					lst_ExternalStockout.setCurrentRow(j);
					if (listProxy.getRetrievalPlankey().equals(
							entity.getRetrievalPlankey()))
					{
						hasInputed = true;
						break;
					}
				}
				if (hasInputed)
				{
					continue;
				}
				lst_ExternalStockout.addRow();
				lst_ExternalStockout.setCurrentRow(lst_ExternalStockout
						.getMaxRows() - 1);

				listProxy.setRowValueByEntity(entity);
				
				RetrievalPlankeySortableHandler.insert(autoList, entity);
				listProxy.setAuto(true);
			}

			session.setAttribute(SETTING_DIALOG_FLAG, null);
			session.setAttribute(EXTERNAL_STOCKOUT_VIEW_LIST, null);
		}
		if (session.getAttribute(SETTING_DIALOG_FLAG) != null)
		{

			if (autoList.size() <= 0 && manuList.size() <= 0)
			{
				message.setMsgResourceKey("7000015");
				return;
			}
			setConfirm("YKK-LBL-SetConfirm");
			getViewState().setBoolean(DIALOG_FLAG, true);
			session.setAttribute(SETTING_DIALOG_FLAG, null);
			session.setAttribute(EXTERNAL_STOCKOUT_VIEW_LIST, null);
		}

	}

	/**
	 * Refered before calling each control event.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Initialize(ActionEvent e) throws Exception
	{
		String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
		if (menuparam != null)
		{
			// #CM37828
			// fetch parameter
			String title = CollectionUtils.getMenuParam(0, menuparam);
			String functionID = CollectionUtils.getMenuParam(1, menuparam);
			String menuID = CollectionUtils.getMenuParam(2, menuparam);
			// #CM37829
			// save to viewstate
			this.getViewState().setString(M_TITLE_KEY, title);
			this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
			this.getViewState().setString(M_MENUID_KEY, menuID);
			// #CM37830
			// set screen name
			// lbl_SettingName.setResourceKey(title);
		}
	}

	/**
	 * Initializes the screen.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Load(ActionEvent e) throws Exception
	{
		InitSession();
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_OrderNo_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_OrderNo_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_OrderNo_EnterKey(ActionEvent e) throws Exception
	{
		btn_Input2_Click(null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_OrderNo_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_OrderNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_OrderNo_TabKey(ActionEvent e) throws Exception
	{
		btn_Input2_Click(null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_RetrievalNo_AutoComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_RetrievalNo_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_RetrievalNo_EnterKey(ActionEvent e) throws Exception
	{
		btn_Input_Click(null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_RetrievalNo_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_RetrievalNo_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_RetrievalNo_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_AutoComplete(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_AutoCompleteItemClick(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_EnterKey(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_InputComplete(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_Server(ActionEvent e)
			throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void txt_StockOutDeletionPassword_TabKey(ActionEvent e)
			throws Exception
	{
	}

	private void ValidateCheck() throws ValidateException
	{
		setFocus(txt_RetrievalNo);
		txt_RetrievalNo.validate();
	}

	private void ValidateCheck2() throws ValidateException
	{
		setFocus(txt_OrderNo);
		txt_OrderNo.validate();
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectScreen_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectScreen_Click(ActionEvent e) throws Exception
	{
		session.setAttribute(SETTING_DIALOG_FLAG, null);
		redirect("/YkkGMAX/Popup/ExternalStockoutStartView.do", null,
				"/progress.do");
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectAll_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectAll_Click(ActionEvent e) throws Exception
	{
		for (int i = 1; i < this.lst_ExternalStockout.getMaxRows(); i++)
		{
			lst_ExternalStockout.setCurrentRow(i);

			if (lst_ExternalStockout.getCellEnabled(listProxy.getAUTO_COLUMN()) == null
					|| lst_ExternalStockout.getCellEnabled(
							listProxy.getAUTO_COLUMN()).equals("true"))
			{
				listProxy.setAuto(true);
				OnAutoCheckBoxChanged(i);
			}
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_UnselectAll_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_UnselectAll_Click(ActionEvent e) throws Exception
	{
		for (int i = 1; i < this.lst_ExternalStockout.getMaxRows(); i++)
		{
			lst_ExternalStockout.setCurrentRow(i);

			if (lst_ExternalStockout.getCellEnabled(listProxy.getAUTO_COLUMN()) == null
					|| lst_ExternalStockout.getCellEnabled(
							listProxy.getAUTO_COLUMN()).equals("true"))
			{
				listProxy.setAuto(false);
				listProxy.setDesignateLocation(false);
				OnAutoCheckBoxChanged(i);
				OnDesignateLocationCheckBoxChanged(i);
			}
		}
	}


}
// end of class
