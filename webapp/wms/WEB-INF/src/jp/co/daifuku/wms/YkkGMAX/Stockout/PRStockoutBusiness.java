// $Id: skeltenBusiness.java,v 1.2 2007/03/07 07:45:23 suresh Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Stockout;

import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.StockoutEntity;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.PRStockoutListProxy;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.resident.*;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * <p/>
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"><TD>Date</TD><TD>Name</TD><TD>Comment</TD></TR>
 * <TR><TD>2004/02/13</TD><TD>N.Sawa(DFK)</TD><TD>created this class</TD></TR>
 * </TABLE>
 * <BR>
 *
 * @author $Author: suresh $
 * @version $Revision: 1.2 $, $Date: 2007/03/07 07:45:23 $
 */
public class PRStockoutBusiness extends PRStockout implements WMSConstants {
    // Class fields --------------------------------------------------
    private final PRStockoutListProxy listProxy = new PRStockoutListProxy(
            lst_PRStockout, this);

    private final String DIALOG_FLAG = "DIALOG_FLAG";

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    /**
     * Initializes the screen.
     *
     * @param e ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception {
        txt_SuccessCount.setInt(0);
        txt_NotExistsCount.setInt(0);
        txt_RetrievaledCount.setInt(0);
        txt_ShortageCount.setInt(0);
        txt_QtyNotMatchCount.setInt(0);
    }

    /**
     * Refered before calling each control event.
     *
     * @param e ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception {
        String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
        if (menuparam != null) {
            // #CM37828
            // fetch parameter
            String title = CollectionUtils.getMenuParam(0, menuparam);
            String functionID = CollectionUtils.getMenuParam(1, menuparam);
            String menuID = CollectionUtils.getMenuParam(2, menuparam);
            // #CM37829
            // save to viewstate
            this.getViewState().setString(M_TITLE_KEY, title);
            this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
            this.getViewState().setString(M_MENUID_KEY, menuID);
            // #CM37830
            // set screen name
            lbl_SettingName.setResourceKey(title);
        }
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    // Event handler methods -----------------------------------------

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_SettingName_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Help_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void tab_Click(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Click(ActionEvent e) throws Exception {
        forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
                .getString(M_MENUID_KEY)));
    }


    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_PRNo_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_PRNo_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_PRNo_AutoCompleteItemClick(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_PRNo_AutoComplete(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_PRNo_EnterKey(ActionEvent e) throws Exception {
        btn_Input_Click(null);
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_PRNo_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_PRNo_InputComplete(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_Status_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_Status_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_Status_AutoCompleteItemClick(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_Status_AutoComplete(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_Status_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_Status_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_Status_InputComplete(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_PRCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_SuccessCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_SuccessCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_SuccessCount_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_SuccessCount_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_NotExistsCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_NotExistsCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_NotExistsCount_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_NotExistsCount_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_RetrievaledCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_RetrievaledCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_RetrievaledCount_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_RetrievaledCount_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_ShortageCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_ShortageCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_ShortageCount_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_ShortageCount_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_QtyNotMatchCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_QtyNotMatchCount_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_QtyNotMatchCount_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void txt_QtyNotMatchCount_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Input_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Input_Click(ActionEvent e) throws Exception {
        setFocus(txt_PRNo);
        txt_PRNo.validate();
        Connection conn = null;

        try {
            conn = ConnectionManager.getConnection();

            ASRSInfoCentre centre = new ASRSInfoCentre(conn);

            List list = centre.getStockoutEntity(txt_PRNo.getText());

            if (list.isEmpty()) {
                txt_Status.setText("PRNo不存在");
                int count = txt_NotExistsCount.getInt();
                txt_NotExistsCount.setInt(count+1);
                return;
            }
            for (int i = 0; i < list.size(); i++) {
                StockoutEntity entity = (StockoutEntity) list.get(i);
                if (entity.getOutQty() != 0) {
                    txt_Status.setText("部分已出库/已出库设定");
                    int count = txt_RetrievaledCount.getInt();
                    txt_RetrievaledCount.setInt(count+1);
                    return;
                }
                if (entity.getEnableToStockoutCount() < entity.getStockoutCount()) {
                    txt_Status.setText("PRNo库存不足");
                    int count = txt_ShortageCount.getInt();
                    txt_ShortageCount.setInt(count+1);
                    return;
                }
                if (entity.getManagementRetrievalQty() != entity.getStockoutNecessaryQty()) {
                    txt_Status.setText("生产指示数待调整");
                    int count = txt_QtyNotMatchCount.getInt();
                    txt_QtyNotMatchCount.setInt(count+1);
                    return;
                }
                if (!"0".equals(entity.getItemManageFlag())) {
                    txt_Status.setText("物料为非管理品");
                    return;
                }
                if ("23".equals(entity.getRetrievalStation()) || "25".equals(entity.getRetrievalStation()) || "26".equals(entity.getRetrievalStation())) {
                    txt_Status.setText("PRNo为外注出库");
                    return;
                }
            }
            for (int i = 0; i < list.size(); i++) {
                StockoutEntity entity = (StockoutEntity) list.get(i);
                boolean contains = false;
                for(int j = 1; j < lst_PRStockout.getMaxRows(); j++){
                    lst_PRStockout.setCurrentRow(j);
                    StockoutEntity et = listProxy.getStockoutEntity();
                    if(et.getRetrievalPlankey().equals(entity.getRetrievalPlankey())){
                        contains = true;
                        break;
                    }
                }
                if(contains){
                    txt_PRNo.setText("");
                    continue;
                }
                lst_PRStockout.setCurrentRow(lst_PRStockout.getMaxRows());
                lst_PRStockout.addRow();
                listProxy.setRowValueByEntity(entity);
                lst_PRStockout.setChecked(listProxy.getAUTO_COLUMN(), true);
                txt_Status.setText("设定成功");
                int count = txt_SuccessCount.getInt();
                txt_SuccessCount.setInt(count+1);
                txt_PRNo.setText("");
            }
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e1) {
                    DebugPrinter.print(DebugLevel.ERROR, e1.getMessage());
                    YKKDBException ex = new YKKDBException();
                    ex.setResourceKey("7200002");
                    throw ex;
                }
            }
        }
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Click(ActionEvent e) throws Exception {
        txt_PRNo.setText("");
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Set_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_Set_Click(ActionEvent e) throws Exception {
        ArrayList autoList = new ArrayList();

        message.setMsgResourceKey("7000034");
        for(int i = 1; i < lst_PRStockout.getMaxRows(); i++){
            lst_PRStockout.setCurrentRow(i);
            autoList.add(listProxy.getStockoutEntity());
        }
        if (autoList.size() <= 0)
        {
            message.setMsgResourceKey("7000015");
            return;
        }
        setConfirm("YKK-LBL-SetConfirm");
        getViewState().setBoolean(DIALOG_FLAG, true);
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {

        if (this.getViewState().getBoolean(DIALOG_FLAG))
        {
            boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
                    .booleanValue();
            if (!isExecute)
            {
                return;
            }
            ArrayList autoList = new ArrayList();

            message.setMsgResourceKey("7000034");
            for(int i = 1; i < lst_PRStockout.getMaxRows(); i++){
                lst_PRStockout.setCurrentRow(i);
                autoList.add(listProxy.getStockoutEntity());
            }

            ProcessorInvoker pi = new ProcessorInvoker(message);
            if (autoList != null && autoList.size() > 0)
            {
                pi.addProcessor(new StockoutAutoRequestProcessor(autoList,
                        getUserInfo().getUserId(), pul_Subdivision
                        .getSelectedValue()));
            }
            pi.run();

            btn_CancelData_Click(null);
        }
    }
    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_SelectAll_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_SelectAll_Click(ActionEvent e) throws Exception {
        for (int i = 1; i < this.lst_PRStockout.getMaxRows(); i++) {
            lst_PRStockout.setCurrentRow(i);
            listProxy.setAuto(true);
        }
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_UnselectAll_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_UnselectAll_Click(ActionEvent e) throws Exception {
        for (int i = 1; i < this.lst_PRStockout.getMaxRows(); i++) {
            lst_PRStockout.setCurrentRow(i);
            listProxy.setAuto(false);
        }
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_CancelData_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void btn_CancelData_Click(ActionEvent e) throws Exception {
        txt_PRNo.setText("");
        txt_Status.setText("");
        txt_SuccessCount.setInt(0);
        txt_NotExistsCount.setInt(0);
        txt_RetrievaledCount.setInt(0);
        txt_ShortageCount.setInt(0);
        txt_QtyNotMatchCount.setInt(0);
        lst_PRStockout.clearRow();
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lbl_Subdivision_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void pul_Subdivision_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void pul_Subdivision_Change(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_EnterKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_TabKey(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_InputComplete(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_ColumClick(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_Server(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_Change(ActionEvent e) throws Exception {
    }

    /**
     * @param e ActionEvent
     * @throws Exception
     */
    public void lst_PRStockout_Click(ActionEvent e) throws Exception {
    }


}
//end of class
