// $Id: LocationMaintenanceBusiness.java,v 1.1 2007/12/13 06:25:09 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Maintenance;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.exception.ValidateException;
import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.DialogEvent;
import jp.co.daifuku.util.CollectionUtils;
import jp.co.daifuku.wms.YkkGMAX.Entities.ItemViewEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.LocationViewEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.TicketNoViewEntity;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.DBFlags;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.base.common.WMSConstants;
import jp.co.daifuku.wms.base.display.web.BusinessClassHelper;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.1 $, $Date: 2007/12/13 06:25:09 $
 * @author $Author: administrator $
 */
public class LocationMaintenanceBusiness extends LocationMaintenance implements
	WMSConstants
{

    // Class fields --------------------------------------------------

    // Class variables -----------------------------------------------

    // Class method --------------------------------------------------

    // Constructors --------------------------------------------------

    // Public methods ------------------------------------------------

    private final String TICKET_NO_VIEW_ENTITY = "TICKET_NO_VIEW_ENTITY";

    private final String TICKET_NO = "TICKET_NO";

    private final String DIALOG_FLAG = "DIALOG_FLAG";

    private final String MAINTENANCE_MODE = "MAINTENANCE_MODE";

    private final String LOCATION_STATUS = "LOCATION_STATUS";

    private final String MANAGE_ITEM_FLAG = "MANAGE_ITEM_FLAG";

    private final String LOCATION_NO = "LOCATION_NO";

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Add_Click(ActionEvent e) throws Exception
    {
	ValidateCheck1();
	setAddMode();
	ClearControls();
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    if (!centre.isEmptyLocation(StringUtils
		    .formatLocationNoFromPageToDB(txt_LocationNo.getText())))
	    {
		message.setMsgResourceKey("7000008");
		return;
	    }

	    ClearControls();

	    txt_LocationNo_RO.setText(txt_LocationNo.getText());
	    txt_LocationStatus.setText("空货位");
	    if (rdo_ItemInManage.getChecked())
	    {
		txt_ManageDivision.setText("管理品");
	    }
	    else
	    {
		txt_ManageDivision.setText("管理外品");
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Add_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Click(ActionEvent e) throws Exception
    {
	ClearControls();
    }

    // Package methods -----------------------------------------------

    // Protected methods ---------------------------------------------

    // Private methods -----------------------------------------------

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Clear_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Delete_Click(ActionEvent e) throws Exception
    {
	ValidateCheck1();
	setDeleteMode();
	ClearControls();
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    if (!centre.isUsedLocation(StringUtils
		    .formatLocationNoFromPageToDB(txt_LocationNo.getText()),
		    rdo_ItemInManage.getChecked()))
	    {
		message.setMsgResourceKey("7000010");
		return;
	    }

	    ClearControls();

	    LocationViewEntity entity = centre.getLocationMaintenanceEntity(
		    StringUtils.formatLocationNoFromPageToDB(txt_LocationNo
			    .getText()), rdo_ItemInManage.getChecked());

	    txt_LocationNo_RO.setText(txt_LocationNo.getText());
	    txt_LocationStatus.setText("实货位");
	    if (this.rdo_ItemInManage.getChecked())
	    {
		txt_ManageDivision.setText("管理品");
	    }
	    else
	    {
		txt_ManageDivision.setText("管理外品");
	    }
	    txt_TicketNo.setText(entity.getTicketNo());
	    txt_ItemCode.setText(entity.getItemCode());
	    txt_ItemName.setText(entity.getItemName());
	    txt_ColorCode.setText(entity.getColorCode());
	    txt_InstockCount.setInt(entity.getInstockCount());
	    txt_BucketNo.setText(entity.getBucketNo());
	    txt_StockinDate.setText(StringUtils.formatDateFromDBToPage(entity
		    .getStockinDate()));
	    txt_StockinTime.setText(StringUtils.formatTimeFromDBToPage(entity
		    .getStockinTime()));
	    txt_Memo.setText(entity.getMemo());
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Delete_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Help_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_LocationViewInquiry_Click(ActionEvent e) throws Exception
    {
	List locationStatusList = (List) session.getAttribute(LOCATION_STATUS);

	locationStatusList.clear();

	if (this.chk_BlankLocation.getChecked())
	{
	    locationStatusList.add("BLANK");
	}
	if (this.chk_UsedLocation.getChecked())
	{
	    locationStatusList.add("USED");
	}
	if (this.chk_ErroLocation.getChecked())
	{
	    locationStatusList.add("ERROR");
	}
	if (this.chk_WorkLocation.getChecked())
	{
	    locationStatusList.add("WORK");
	}

	if (rdo_ItemInManage.getChecked())
	{
	    session.setAttribute(MANAGE_ITEM_FLAG,
		    DBFlags.ManageItemFlag.INMANAGE);
	}
	else
	{
	    session.setAttribute(MANAGE_ITEM_FLAG,
		    DBFlags.ManageItemFlag.WITHOUTMANAGE);
	}
	redirect("/YkkGMAX/Popup/LocationView.do", null, "/progress.do");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_LocationViewInquiry_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Modify_Click(ActionEvent e) throws Exception
    {
	ValidateCheck1();
	setModiMode();
	ClearControls();
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    if (!centre.isUsedLocation(StringUtils
		    .formatLocationNoFromPageToDB(txt_LocationNo.getText()),
		    rdo_ItemInManage.getChecked()))
	    {
		message.setMsgResourceKey("7000009");
		return;
	    }

	    ClearControls();

	    LocationViewEntity entity = centre.getLocationMaintenanceEntity(
		    StringUtils.formatLocationNoFromPageToDB(txt_LocationNo
			    .getText()), rdo_ItemInManage.getChecked());

	    txt_LocationNo_RO.setText(txt_LocationNo.getText());
	    txt_LocationStatus.setText("实货位");
	    if (this.rdo_ItemInManage.getChecked())
	    {
		txt_ManageDivision.setText("管理品");
	    }
	    else
	    {
		txt_ManageDivision.setText("管理外品");
	    }
	    txt_TicketNo.setText(entity.getTicketNo());
	    txt_ItemCode.setText(entity.getItemCode());
	    txt_ItemName.setText(entity.getItemName());
	    txt_ColorCode.setText(entity.getColorCode());
	    txt_InstockCount.setInt(entity.getInstockCount());
	    txt_BucketNo.setText(entity.getBucketNo());
	    txt_StockinDate.setText(StringUtils.formatDateFromDBToPage(entity
		    .getStockinDate()));
	    txt_StockinTime.setText(StringUtils.formatTimeFromDBToPage(entity
		    .getStockinTime()));
	    txt_Memo.setText(entity.getMemo());
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Modify_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Click(ActionEvent e) throws Exception
    {
	ValidateCheck2();
	setFocus(txt_InstockCount);
	if (txt_InstockCount.getInt() <= 0)
	{
	    message.setMsgResourceKey("7000029");
	    return;
	}
	setFocus(null);
	setConfirm("YKK-LBL-SetConfirm");
	getViewState().setBoolean(DIALOG_FLAG, true);
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_Set_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_TicketNoBrowse_Click(ActionEvent e) throws Exception
    {
	session.setAttribute(TICKET_NO, txt_TicketNo.getText());

	redirect("/YkkGMAX/Popup/TicketNoView.do", null, "/progress.do");
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_TicketNoBrowse_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Click(ActionEvent e) throws Exception
    {
	forward(BusinessClassHelper.getSubMenuPath(this.getViewState()
		.getString(M_MENUID_KEY)));
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void btn_ToMenu_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_BlankLocation_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_BlankLocation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_ErroLocation_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_ErroLocation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_UsedLocation_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_UsedLocation_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_WorkLocation_Change(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void chk_WorkLocation_Server(ActionEvent e) throws Exception
    {
    }

    private void ClearControls()
    {
	txt_LocationNo_RO.setText("");
	txt_LocationStatus.setText("");
	txt_ManageDivision.setText("");
	txt_TicketNo.setText("");
	txt_ItemCode.setText("");
	txt_ItemName.setText("");
	txt_ColorCode.setText("");
	txt_InstockCount.setText("");
	txt_BucketNo.setText("");
	txt_StockinDate.setText("");
	txt_StockinTime.setText("");
	txt_Memo.setText("");

    }

    private void FillControls()
    {
	Connection conn = null;

	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);
	    TicketNoViewEntity entity = centre.getTicketNoEntity(txt_TicketNo
		    .getText());
	    if (entity != null)
	    {
		txt_TicketNo.setText(entity.getTicketNo());
		txt_ItemCode.setText(entity.getItemCode());
		txt_ItemName.setText(entity.getItemName());
		txt_ColorCode.setText(entity.getColorCode());
		txt_InstockCount.setInt(entity.getInstockCount());
	    }
	    else
	    {
		message.setMsgResourceKey("7000038");
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);

	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqle)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}

    }

    private void FillItemName()
    {
	Connection conn = null;

	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    List itemNameList = centre.getUnmanagedItemNameList(txt_ItemCode
		    .getText());

	    txt_ItemName.setText("");
	    if (itemNameList.size() > 0)
	    {
		ItemViewEntity entity = (ItemViewEntity) itemNameList.get(0);

		txt_ItemName.setText(entity.getItemName1());
	    }
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);

	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqle)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    private LocationViewEntity getLocationViewEntity()
    {
	LocationViewEntity entity = new LocationViewEntity();
	entity.setLocationNo(StringUtils
		.formatLocationNoFromPageToDB(txt_LocationNo_RO.getText()));
	if (txt_LocationStatus.getText().equals("实货位"))
	{
	    entity.setLocationStatus(DBFlags.Tanaflg.USED_LOCAT);
	}
	else
	{
	    entity.setLocationStatus(DBFlags.Tanaflg.EMPTY_LOCAT);
	}
	if (txt_ManageDivision.getText().equals("管理品"))
	{
	    entity.setManageDivision(DBFlags.ManageItemFlag.INMANAGE);
	}
	else
	{
	    entity.setManageDivision(DBFlags.ManageItemFlag.WITHOUTMANAGE);
	}
	entity.setTicketNo(txt_TicketNo.getText());
	entity.setInstockCount(txt_InstockCount.getInt());
	entity.setBucketNo(txt_BucketNo.getText());
	if (!StringUtils.IsNullOrEmpty(txt_StockinDate.getText()))
	{
	    entity.setStockinDate(StringUtils
		    .formatDateFromPageToDB(txt_StockinDate.getText()));
	}
	else
	{
	    entity.setStockinDate(StringUtils.getCurrentDate());
	}
	if (!StringUtils.IsNullOrEmpty(txt_StockinTime.getText()))
	{
	    entity.setStockinTime(StringUtils
		    .formatTimeFormPageToDB(txt_StockinTime.getText()));
	}
	else
	{
	    entity.setStockinTime(StringUtils.getCurrentTime());
	}
	if (txt_ItemCode.getText().length() == 0)
	{
	    entity.setItemCode(" ");
	}
	else
	{
	    entity.setItemCode(txt_ItemCode.getText());
	}
	if (txt_ColorCode.getText().length() == 0)
	{
	    entity.setColorCode(" ");
	}
	else
	{
	    entity.setColorCode(txt_ColorCode.getText());
	}
	if (txt_Memo.getText().length() == 0)
	{
	    entity.setMemo(" ");
	}
	else
	{
	    entity.setMemo(txt_Memo.getText());
	}

	return entity;
    }

    private void InitSession()
    {
	session.setAttribute(LOCATION_STATUS, new ArrayList());
	session.setAttribute(MANAGE_ITEM_FLAG, null);
	session.setAttribute(LOCATION_NO, null);
	session.setAttribute(TICKET_NO_VIEW_ENTITY, null);
	session.setAttribute(TICKET_NO, null);

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_BucketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_ColorCode_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Date_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_DealDivision_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_InstockCount_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_ItemCode_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_LocationNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_LocationNoLocationStatus_Server(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_LocationStatus_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_LocationView_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_ManageDivision_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Memo_Server(ActionEvent e) throws Exception
    {
    }

    // Event handler methods -----------------------------------------
    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_SettingName_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Star1_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Star2_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_StockinDateTime_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_TicketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void lbl_Time_Server(ActionEvent e) throws Exception
    {
    }

    public void page_ConfirmBack(ActionEvent e) throws Exception
    {
	if (!this.getViewState().getBoolean(DIALOG_FLAG))
	{
	    return;
	}
	boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
		.booleanValue();
	if (!isExecute)
	{
	    return;
	}
	message.setMsgResourceKey("7000034");
	Connection conn = null;
	try
	{
	    conn = ConnectionManager.getConnection();

	    ASRSInfoCentre centre = new ASRSInfoCentre(conn);

	    String maintenanceMode = (String) session
		    .getAttribute(MAINTENANCE_MODE);

	    if (maintenanceMode.equals("ADD"))
	    {
		if (centre.addLocation(getLocationViewEntity(), getUserInfo()
			.getUserId(), message))
		{
		    return;
		}
	    }
	    else if (maintenanceMode.equals("MODIFY"))
	    {
		if (centre.modiLocation(getLocationViewEntity(), getUserInfo()
			.getUserId(), message))
		{
		    return;
		}
	    }
	    else if (maintenanceMode.equals("DELETE"))
	    {
		if (centre.deleteLocation(getLocationViewEntity(),
			getUserInfo().getUserId(), message))
		{
		    return;
		}
	    }
	    message.setMsgResourceKey("7400002");
	    conn.commit();
	    ClearControls();
	}
	catch (YKKDBException dbEx)
	{
	    String msgString = MessageResources.getText(dbEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7200001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    try
	    {
		if (conn != null)
		{
		    conn.rollback();
		}
	    }
	    catch (SQLException ex)
	    {
		DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
		message.setMsgResourceKey("7200002");
	    }
	}
	catch (YKKSQLException sqlEx)
	{
	    String msgString = MessageResources.getText(sqlEx.getResourceKey());
	    DebugPrinter.print(DebugLevel.ERROR, msgString);
	    message.setMsgResourceKey("7300001");
	    List paramList = new ArrayList();
	    paramList.add(msgString);
	    message.setMsgParameter(paramList);
	    try
	    {
		if (conn != null)
		{
		    conn.rollback();
		}
	    }
	    catch (SQLException ex)
	    {
		DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
		message.setMsgResourceKey("7200002");
	    }
	}
	finally
	{
	    if (conn != null)
	    {
		try
		{
		    conn.close();
		}
		catch (SQLException sqlex)
		{
		    DebugPrinter.print(DebugLevel.ERROR, sqlex.getMessage());
		    message.setMsgResourceKey("7200002");
		}
	    }
	}
    }

    public void page_DlgBack(ActionEvent e) throws Exception
    {
	((DialogEvent) e).getDialogParameters();

	if (session.getAttribute(LOCATION_NO) != null)
	{
	    txt_LocationNo.setText((String) session.getAttribute(LOCATION_NO));

	    session.setAttribute(LOCATION_NO, null);
	}
	if (session.getAttribute(TICKET_NO_VIEW_ENTITY) != null)
	{
	    TicketNoViewEntity entity = (TicketNoViewEntity) session
		    .getAttribute(TICKET_NO_VIEW_ENTITY);
	    txt_TicketNo.setText(entity.getTicketNo());
	    txt_ItemCode.setText(entity.getItemCode());
	    txt_ItemName.setText(entity.getItemName());
	    txt_ColorCode.setText(entity.getColorCode());
	    txt_InstockCount.setInt(entity.getInstockCount());

	    session.setAttribute(TICKET_NO_VIEW_ENTITY, null);
	    session.setAttribute(TICKET_NO, null);
	}
    }

    /**
     * Refered before calling each control event.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Initialize(ActionEvent e) throws Exception
    {
	String menuparam = this.getHttpRequest().getParameter(MENUPARAM);
	if (menuparam != null)
	{
	    // #CM37828
	    // fetch parameter
	    String title = CollectionUtils.getMenuParam(0, menuparam);
	    String functionID = CollectionUtils.getMenuParam(1, menuparam);
	    String menuID = CollectionUtils.getMenuParam(2, menuparam);
	    // #CM37829
	    // save to viewstate
	    this.getViewState().setString(M_TITLE_KEY, title);
	    this.getViewState().setString(M_FUNCTIONID_KEY, functionID);
	    this.getViewState().setString(M_MENUID_KEY, menuID);
	    // #CM37830
	    // set screen name
	    // lbl_SettingName.setResourceKey(title);
	}
    }

    /**
     * Initializes the screen.
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void page_Load(ActionEvent e) throws Exception
    {
	InitSession();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ItemInManage_Click(ActionEvent e) throws Exception
    {
	ClearControls();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ItemInManage_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ItemOutOfManage_Click(ActionEvent e) throws Exception
    {
	ClearControls();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void rdo_ItemOutOfManage_Server(ActionEvent e) throws Exception
    {
    }

    private void setAddMode()
    {
	setManageItemFlag();
	txt_StockinDate.setReadOnly(false);
	txt_StockinTime.setReadOnly(false);
	txt_Memo.setReadOnly(false);
	txt_BucketNo.setReadOnly(false);
	if (rdo_ItemInManage.getChecked())
	{
	    txt_TicketNo.setReadOnly(false);
	    txt_ItemCode.setReadOnly(true);
	    txt_ColorCode.setReadOnly(true);
	    txt_InstockCount.setReadOnly(true);
	    btn_TicketNoBrowse.setEnabled(true);
	}
	else
	{
	    txt_TicketNo.setReadOnly(true);
	    txt_ItemCode.setReadOnly(false);
	    txt_ColorCode.setReadOnly(false);
	    txt_InstockCount.setReadOnly(false);
	    btn_TicketNoBrowse.setEnabled(false);
	}

	session.setAttribute(MAINTENANCE_MODE, "ADD");

    }

    private void setDeleteMode()
    {
	setManageItemFlag();

	txt_TicketNo.setReadOnly(true);
	txt_ItemCode.setReadOnly(true);
	txt_ColorCode.setReadOnly(true);
	txt_InstockCount.setReadOnly(true);
	txt_BucketNo.setReadOnly(true);
	txt_StockinDate.setReadOnly(true);
	txt_StockinTime.setReadOnly(true);
	txt_Memo.setReadOnly(true);
	btn_TicketNoBrowse.setEnabled(false);

	session.setAttribute(MAINTENANCE_MODE, "DELETE");
    }

    private void setManageItemFlag()
    {
	if (rdo_ItemInManage.getChecked())
	{
	    session.setAttribute(MANAGE_ITEM_FLAG,
		    DBFlags.ManageItemFlag.INMANAGE);
	}
	else
	{
	    session.setAttribute(MANAGE_ITEM_FLAG,
		    DBFlags.ManageItemFlag.WITHOUTMANAGE);
	}
    }

    private void setModiMode()
    {
	setManageItemFlag();
	txt_StockinDate.setReadOnly(false);
	txt_StockinTime.setReadOnly(false);
	txt_Memo.setReadOnly(false);
	txt_BucketNo.setReadOnly(false);
	txt_TicketNo.setReadOnly(true);
	btn_TicketNoBrowse.setEnabled(false);
	if (rdo_ItemInManage.getChecked())
	{
	    txt_ItemCode.setReadOnly(true);
	    txt_ColorCode.setReadOnly(true);
	    txt_InstockCount.setReadOnly(true);
	}
	else
	{
	    txt_ItemCode.setReadOnly(false);
	    txt_ColorCode.setReadOnly(false);
	    txt_InstockCount.setReadOnly(false);
	}

	session.setAttribute(MAINTENANCE_MODE, "MODIFY");

    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void tab_Click(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BucketNo_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BucketNo_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BucketNo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BucketNo_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BucketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_BucketNo_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ColorCode_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ColorCode_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ColorCode_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ColorCode_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ColorCode_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ColorCode_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_InstockCount_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_InstockCount_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_InstockCount_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemCode_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemCode_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemCode_EnterKey(ActionEvent e) throws Exception
    {
	ValidateControl();
	FillItemName();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemCode_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemCode_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemCode_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemName_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemName_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemName_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemName_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemName_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ItemName_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_RO_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_RO_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_RO_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationNo_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationStatus_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationStatus_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationStatus_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationStatus_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationStatus_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_LocationStatus_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ManageDivision_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ManageDivision_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ManageDivision_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ManageDivision_InputComplete(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ManageDivision_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_ManageDivision_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Memo_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Memo_AutoCompleteItemClick(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Memo_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Memo_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Memo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_Memo_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinDate_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinDate_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinDate_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinTime_EnterKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinTime_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_StockinTime_TabKey(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_AutoComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_AutoCompleteItemClick(ActionEvent e)
	    throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_EnterKey(ActionEvent e) throws Exception
    {
	ValidateCheck();
	txt_ItemCode.setText("");
	txt_ItemName.setText("");
	txt_ColorCode.setText("");
	txt_InstockCount.setText("");
	FillControls();
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_InputComplete(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_Server(ActionEvent e) throws Exception
    {
    }

    /**
     * 
     * @param e
     *                ActionEvent
     * @throws Exception
     */
    public void txt_TicketNo_TabKey(ActionEvent e) throws Exception
    {
    }

    private void ValidateCheck() throws ValidateException
    {
	setFocus(txt_TicketNo);
	txt_TicketNo.validate();
	setFocus(null);

    }

    private void ValidateCheck1() throws ValidateException
    {
	setFocus(txt_LocationNo);
	txt_LocationNo.validate();
	setFocus(null);
    }

    private void ValidateCheck2() throws ValidateException
    {
	setFocus(txt_LocationNo_RO);
	txt_LocationNo_RO.validate();
	setFocus(txt_LocationStatus);
	txt_LocationStatus.validate();
	setFocus(txt_ManageDivision);
	txt_ManageDivision.validate();
	if (this.txt_ManageDivision.getText().equals("管理品"))
	{
	    setFocus(txt_TicketNo);
	    txt_TicketNo.validate();
	}
	setFocus(txt_BucketNo);
	txt_BucketNo.validate();
	setFocus(null);

    }

    private void ValidateControl() throws ValidateException
    {
	setFocus(txt_ItemCode);
	txt_ItemCode.validate();
	setFocus(null);
    }
}
// end of class
