//#CM566352
//$Id: StorageHostSendViewFinder.java,v 1.2 2006/12/07 08:56:15 suresh Exp $
package jp.co.daifuku.wms.storage.dbhandler ;

//#CM566353
/*
 * Copyright 2000-2003 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import jp.co.daifuku.common.ReadWriteException;
import jp.co.daifuku.common.RmiMsgLogClient;
import jp.co.daifuku.common.TraceHandler;
import jp.co.daifuku.common.text.SimpleFormat;
import jp.co.daifuku.common.text.StringUtil;
import jp.co.daifuku.wms.base.common.DEBUG;
import jp.co.daifuku.wms.base.common.SearchKey;
import jp.co.daifuku.wms.base.dbhandler.HostSendViewReportFinder;
import jp.co.daifuku.wms.storage.dbhandler.StorageHostSendViewSearchKey;

//#CM566354
/**
 * The class to retrieve HostSendView of the data base and to do the mapping to HostSendView. <BR>
 * Use this class when you have a look at display of the retrieval result on the screen. <BR>
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"><TD>Date</TD><TD>Name</TD><TD>Comment</TD></TR>
 * <TR><TD>2003/03/11</TD><TD>kaminishizono</TD><TD>created this class</TD></TR>
 * </TABLE>
 * <BR>
 * @version $Revision: 1.2 $, $Date: 2006/12/07 08:56:15 $
 * @author  $Author: suresh $
 */
public class StorageHostSendViewFinder extends HostSendViewReportFinder
{
	//#CM566355
	// Class filelds -----------------------------------------------

	//#CM566356
	// Class method --------------------------------------------------
	//#CM566357
	/**
	 * Return the version of this class. 
	 * @return Version and date
	 */
	public static String getVersion()
	{
		return ("$Revision: 1.2 $,$Date: 2006/12/07 08:56:15 $") ;
	}

	//#CM566358
	// Constructors --------------------------------------------------
	//#CM566359
	/**
	 * Generate the instance specifying <code>Connection</code> for the database connection. 
	 * @param conn Connection Connection to database
	 */
	public StorageHostSendViewFinder(Connection conn)
	{
		super(conn);
	}

	//#CM566360
	// Public methods ------------------------------------------------

	//#CM566361
	/**
	 * Retrieve HostSendView, and acquire it. 
	 * @param key StorageHostSendViewSearchKey Key for retrieval
	 * @param sql String Sub-inquiry SQL sentence
	 * @return Number of retrieval results
	 * @throws ReadWriteException Notify the exception generated by the connection with the data base as it is. 
	 */
	public int search(StorageHostSendViewSearchKey key, String sql) throws ReadWriteException
	{
		close();
		open();
		
		Object[]  fmtObj = new Object[5];
		Object[]  cntObj = new Object[5];
		int count = 0;
		ResultSet countret  = null ;

	 	try
	 	{
		
			String fmtCountSQL = "SELECT COUNT({0}) COUNT FROM DVHOSTSENDVIEW {1} {2} {3} {4} ";

			String fmtSQL = "SELECT DISTINCT {0} ";
			fmtSQL += "FROM DVHOSTSENDVIEW " + "{1} {2} {3} {4}";

			//#CM566362
			// 	Edit the acquisition condition. (For COUNT)
			//#CM566363
			// It is assumed all item acquisition. 
			cntObj[0] = " * " ;

			//#CM566364
			// Edit the acquisition condition. 
			if (key.getCollectCondition() != null)
			{
				fmtObj[0] = key.getCollectCondition() ;
				fmtObj[0] = fmtObj[0] + ", " + key.ReferenceJoinColumns() ;
			} else {
				//#CM566365
				// It is assumed all item acquisition in the acquisition condition at a specified doing. 
				fmtObj[0] = " * " ;
			}

			//#CM566366
			// Edit the joining table. 
			if(!StringUtil.isBlank(key.getJoinTable()))
			{
				if(StringUtil.isBlank(sql))
				{
					fmtObj[1] = ", " + key.getJoinTable();
					cntObj[1] = ", " + key.getJoinTable();
				}
				else
				{
					fmtObj[1] = ", ( " + sql + " ) " + key.getJoinTable();
					cntObj[1] = ", ( " + sql + " ) " + key.getJoinTable();
				}
			}

			fmtObj[2] = "";
			//#CM566367
			// Edit the search condition. 			
			if (key.getReferenceCondition() != null)
			{
				fmtObj[2] = "WHERE " + key.getReferenceCondition();
				cntObj[2] = "WHERE " + key.getReferenceCondition();
			}

			//#CM566368
			// Edit the joining condition. 
			if (key.ReferenceJoinWhere() != null)
			{
				if(StringUtil.isBlank(fmtObj[2].toString()))
				{
					fmtObj[2] = " WHERE " + key.ReferenceJoinWhere();
					cntObj[2] = " WHERE " + key.ReferenceJoinWhere();
				}
				else
				{
					fmtObj[2] = fmtObj[2] + " AND " + key.ReferenceJoinWhere();
					cntObj[2] = cntObj[2] + " AND " + key.ReferenceJoinWhere();
				}
			}

			//#CM566369
			// Edit the consolidating condition. 
			if (key.getGroupCondition() != null)
			{
				fmtObj[3] = " GROUP BY " + key.getGroupCondition();
				cntObj[3] = " GROUP BY " + key.getGroupCondition();
			}

			//#CM566370
			// Edit the order of reading. 
			if (key.getSortCondition() != null)
			{
				fmtObj[4] = " ORDER BY " + key.getSortCondition();
				cntObj[4] = " ORDER BY " + key.getSortCondition();
			}

			String sqlcountstring = SimpleFormat.format(fmtCountSQL, cntObj) ;
DEBUG.MSG("HANDLER", "ShippingHostSendView Finder COUNT SQL[" + sqlcountstring + "]") ;
			countret = p_Statement.executeQuery(sqlcountstring);
			while (countret.next())
			{
				count = countret.getInt("COUNT");
			}
			//#CM566371
			//Execute only one retrieval or more. 
			if ( count > 0 )
			{
				String sqlstring = SimpleFormat.format(fmtSQL, fmtObj) ;
DEBUG.MSG("HANDLER", "ShippingHostSendView Finder SQL[" + sqlstring + "]") ;
				p_ResultSet = p_Statement.executeQuery(sqlstring);
				isNextFlag = true;
			}
			else
			{
				p_ResultSet = null;
				isNextFlag = false;
			}
		}
		catch (SQLException e)
		{
			//#CM566372
			//6006002 = Database error occurred.{0}
			RmiMsgLogClient.write( new TraceHandler(6006002, e), "ShippngHostSendViewFinder" ) ;
			throw (new ReadWriteException("6006002" + wDelim + "DvHostSendView")) ;
		}
		return count;
	}

	//#CM566373
	/**
	 * Make SQL sentence which retrieves HostSendView. 
	 * @param key SearchKey Key for retrieval
	 * @return Made SQL sentence
	 * @throws ReadWriteException It is notified when the trouble occurs under the making condition of SQL sentence. 
	 */
	public String createFindSql(SearchKey key) throws ReadWriteException
	{
		Object[] fmtObj = new Object[4];

		String fmtSQL = "SELECT {0} ";
		fmtSQL += "FROM DVHOSTSENDVIEW " + "{1} {2} {3}";

		//#CM566374
		// Edit the acquisition condition. 
		if (key.getCollectCondition() != null)
		{
			fmtObj[0] = key.getCollectCondition() ;
		} else {
			//#CM566375
			// It is assumed all item acquisition in the acquisition condition at a specified doing. 
			fmtObj[0] = " * " ;
		}

		//#CM566376
		// Edit the search condition. 
		if (key.getReferenceCondition() != null)
		{
			fmtObj[1] = " WHERE " + key.getReferenceCondition();
		}

		//#CM566377
		// Edit the consolidating condition. 
		if (key.getGroupCondition() != null)
		{
			fmtObj[2] = " GROUP BY " + key.getGroupCondition();
		}

		//#CM566378
		// Edit the order of reading. 
		if (key.getSortCondition() != null)
		{
			fmtObj[3] = " ORDER BY " + key.getSortCondition();
		}
		String sqlstring = SimpleFormat.format(fmtSQL, fmtObj);

		return sqlstring;
	}

	//#CM566379
	// Package methods -----------------------------------------------

	//#CM566380
	// Protected methods ---------------------------------------------

	//#CM566381
	// Private methods -----------------------------------------------

}
//#CM566382
//end of class

