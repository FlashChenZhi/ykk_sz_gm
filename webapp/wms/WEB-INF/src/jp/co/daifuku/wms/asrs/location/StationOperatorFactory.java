// $Id: StationOperatorFactory.java,v 1.2 2006/10/26 08:31:43 suresh Exp $
package jp.co.daifuku.wms.asrs.location;

//#CM43112
/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Constructor;
import java.sql.Connection;
import java.sql.SQLException;

import jp.co.daifuku.common.InvalidDefineException;
import jp.co.daifuku.common.LogMessage;
import jp.co.daifuku.common.MessageResource;
import jp.co.daifuku.common.NotFoundException;
import jp.co.daifuku.common.ReadWriteException;
import jp.co.daifuku.common.RmiMsgLogClient;
import jp.co.daifuku.common.text.StringUtil;

//#CM43113
/**<en>
 * Generate the StationOperator class and the subclass.
 * In this class, generate it distinguishing neither StationOperator nor the subclass.
 * Use each Handler class when you generate each Stashonsabcras directly.
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"><TD>Date</TD><TD>Name</TD><TD>Comment</TD></TR>
 * <TR><TD>2005/11/14</TD><TD>y.kawai</TD><TD>created this class</TD></TR>
 * </TABLE>
 * <BR>
 * @version $Revision: 1.2 $, $Date: 2006/10/26 08:31:43 $
 * @author  $Author: suresh $
 </en>*/
public class StationOperatorFactory extends Object
{

	//#CM43114
	// Class fields --------------------------------------------------

	//#CM43115
	// Class variables -----------------------------------------------
	//#CM43116
	/**
	 * Connection for data base connection
	 */
	protected Connection wConn ;

	//#CM43117
	/**
	 * Use it for LogWrite when Exception is generated.
	 */
	public StringWriter wSW = new StringWriter();

	//#CM43118
	/**
	 * Use it for LogWrite when Exception is generated. 
	 */
	public PrintWriter  wPW = new PrintWriter(wSW);

	//#CM43119
	/**
	 * Delimiter
	 * When Exception is generated, the delimiter of the parameter of the message of MessageDef.
	 */
	public String wDelim = MessageResource.DELIM ;

	//#CM43120
	// Class method --------------------------------------------------
	//#CM43121
	/**
	 * Return the version of this class.
	 * @return Version and date
	 */
	public static String getVersion()
	{
		return ("$Revision: 1.2 $,$Date: 2006/10/26 08:31:43 $") ;
	}
	

	//#CM43122
	/**
	 * Generate the StationOperator instance from the station number and the class name.
	 * The subclass might be returned by the type of the station operator of the correspondence.
	 * Use it to acquire the instance of the station where the subclass of StationOperator cannot be made an
	 * instance directly (It is not understood which subclass should take charge). 
	 * When the station of the correspondence is not found, the null pointer is returned.
	 * @param conn      <code>Connection for data base connection</code>
	 * @param snum      Station number
	 * @param className Class name
	 * @return Instance of StationOperator(Or Subclass)
	 * @throws SQLException Notify the exception generated by the access to the data base as it is. 
	 * @throws InvalidDefineException It is notified when the class definition is not correct.
	 * @throws ReadWriteException It is notified when abnormality occurs by the connection with the data base.
	 * @throws NotFoundException It is notified when the class of the correspondence is not found. 
	 */
	public static StationOperator makeOperator(Connection conn, String snum, String className) throws SQLException, InvalidDefineException, ReadWriteException, NotFoundException
	{
		StationOperatorFactory of = new StationOperatorFactory(conn) ;
		return (of.getOperator(snum, className)) ;
	}
	
	//#CM43123
	// Constructors --------------------------------------------------
	//#CM43124
	/**
	 * Make the instance specifying the connection for the data base connection. 
	 * @param conn Connection for data base connection
	 */
	public StationOperatorFactory(Connection conn)
	{
		setConnection(conn) ;
	}

	//#CM43125
	// Protected methods ---------------------------------------------
	//#CM43126
	/**
	 * Generate < code>StationOperator</code > instance from the station number and the class name, and return it. 
	 * @param snum      Station number
	 * @param className Class name of object which generates instance. 
	 * <p>Example<br>
	 * "jp.co.daifuku.wms.asrs.location.InOutStationOperator"
	 * </p>
	 * @return <code>StationOperator</code>
	 * @throws SQLException Notify the exception generated by the access to the data base as it is. 
	 * @throws InvalidDefineException It is notified when instances other than StationOperator are generated.
	 * @throws InvalidDefineException It is notified when failing in the generation of the instance.
	 * @throws ReadWriteException It is notified when abnormality occurs by the connection with the data base. 
	 * @throws NotFoundException It is notified when the class of the correspondence is not found. 
	 */
	protected StationOperator getOperator(String snum, String className) throws SQLException, InvalidDefineException, ReadWriteException, NotFoundException
	{
		try
		{
			if (StringUtil.isBlank(className))
			{
				Object[] tObj = new Object[2] ;
				tObj[0] = className ;
				tObj[1] = wSW.toString() ;
				//#CM43127
				//<en> 6006003=Failed to generate the instance. Class name={0} {1}</en>
				RmiMsgLogClient.write(6006003, LogMessage.F_ERROR, "OperatorFactory", tObj);
				throw (new InvalidDefineException("6006003" + wDelim + tObj[0])) ;
			}
			
			//#CM43128
			//<en> load class</en>
			Class lclass = Class.forName(className) ;

			//#CM43129
			//<en>The parameter type is set. </en>
			//#CM43130
			//<en> set parameter types</en>
			Class[] typeparams = new Class[2] ;
			typeparams[0] = Class.forName("java.sql.Connection") ;
			typeparams[1] = Class.forName("java.lang.String");
			Constructor cconst = lclass.getConstructor(typeparams) ;

			//#CM43131
			//<en> set actual parameter</en>
			Object[] tparams = new Object[2] ;
			tparams[0] = wConn ;
			tparams[1] = snum;

			//#CM43132
			//<en> getting Object</en>
			Object tgt = cconst.newInstance(tparams) ;
			if (tgt instanceof StationOperator)
			{
				return ((StationOperator)tgt) ;
			}
			else
			{
				Object[] tObj = new Object[1] ;
				tObj[0] = "StationOperator" ;
				//#CM43133
				//<en> 6006008=Object other than {0} was returned.</en>
				RmiMsgLogClient.write(6006008, LogMessage.F_ERROR, "OperatorFactory", tObj);
				throw (new InvalidDefineException("6006008" + wDelim + tObj[0])) ;
			}
		}
		catch (Exception e)
		{
			//#CM43134
			//<en>Output of error log.</en>
			e.printStackTrace(wPW) ;
			Object[] tObj = new Object[2] ;
			tObj[0] = className ;
			tObj[1] = wSW.toString() ;
			//#CM43135
			//<en> 6006003=Failed to generate the instance. Class name={0} {1}</en>
			RmiMsgLogClient.write(6006003, LogMessage.F_ERROR, "OperatorFactory", tObj);
			throw (new InvalidDefineException("6006003" + wDelim + tObj[0])) ;
		}
	}
	
	//#CM43136
	// Private methods --------------------------------------------------------------
	//#CM43137
	/**
	 * Set the data base connection.
	 * @param conn Database connection
	 */
	private void setConnection(Connection conn)
	{
		wConn = conn;
	}

}
