// $Id: skeltenBusiness.java,v 1.2 2007/03/07 07:45:23 suresh Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Inquiry;

import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.bluedog.webapp.ForwardParameters;
import jp.co.daifuku.common.MessageResource;
import jp.co.daifuku.wms.YkkGMAX.DBHandler.DBHandler;
import jp.co.daifuku.wms.YkkGMAX.Entities.RetrievalOrderPrintEntity;
import jp.co.daifuku.wms.YkkGMAX.Entities.RetrievalOrderPrintHead;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKCommonException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.RetrievalOrderPrintListProxy;
import jp.co.daifuku.wms.YkkGMAX.PageController.PageController;
import jp.co.daifuku.wms.YkkGMAX.PageController.RetrievalOrderPrintPager;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.YkkGMAX.Utils.StringUtils;
import jp.co.daifuku.wms.base.common.WMSConstants;
import org.apache.commons.lang.time.DateFormatUtils;

import java.io.*;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * <p/>
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor"><TD>Date</TD><TD>Name</TD><TD>Comment</TD></TR>
 * <TR><TD>2004/02/13</TD><TD>N.Sawa(DFK)</TD><TD>created this class</TD></TR>
 * </TABLE>
 * <BR>
 *
 * @author $Author: suresh $
 * @version $Revision: 1.2 $, $Date: 2007/03/07 07:45:23 $
 */
public class RetrievalOrderPrintPopupBusiness extends RetrievalOrderPrintPopup implements WMSConstants
{
        // Class fields --------------------------------------------------

        // Class variables -----------------------------------------------

        // Class method --------------------------------------------------

        // Constructors --------------------------------------------------

        // Public methods ------------------------------------------------

        private final String DIALOG_FLAG = "DIALOG_FLAG";
        private final String RETRIEVAL_ORDER_PRINT_HEAD = "RETRIEVAL_ORDER_PRINT_HEAD";
        private final RetrievalOrderPrintListProxy listProxy = new RetrievalOrderPrintListProxy(
                lst_RetrievalOrderPrintPopup1, lst_RetrievalOrderPrintPopup2
        );
        private final PageController pageController = new PageController(
                new RetrievalOrderPrintPager(this, pgr_D), message
        );

        /**
         * Initializes the screen.
         *
         * @param e ActionEvent
         * @throws Exception
         */
        public void page_Load(ActionEvent e) throws Exception
        {
                RetrievalOrderPrintHead head = (RetrievalOrderPrintHead) session
                        .getAttribute(RETRIEVAL_ORDER_PRINT_HEAD);

                try
                {
                        txt_Section.setReadOnly(true);
                        txt_Line.setReadOnly(true);
                        txt_ItemNo.setReadOnly(true);
                        txt_ColorCode.setReadOnly(true);
                        txt_WhenNextWorkBegin.setReadOnly(true);

                        txt_Section.setText(head.getSection());
                        txt_Line.setText(head.getLine());
                        txt_ItemNo.setText(head.getItem());
                        txt_ColorCode.setText(head.getColorCode());
                        txt_WhenNextWorkBegin.setText(StringUtils.formatDateFromDBToPage(head.getNextWorkBeginDate()));

                        pageController.init();
                        pageController.setCountPerPage(30);
                        pageController.turnToFirstPage();
                        if (pgr_D.getMax() == 0)
                        {
                                btn_CSV.setEnabled(false);
                                btn_Print.setEnabled(false);
                        }

                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
        }

        /**
         * Refered before calling each control event.
         *
         * @param e ActionEvent
         * @throws Exception
         */
        public void page_Initialize(ActionEvent e) throws Exception
        {
        }

        // Package methods -----------------------------------------------

        // Protected methods ---------------------------------------------

        // Private methods -----------------------------------------------

        // Event handler methods -----------------------------------------

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_Section_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Section_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Section_AutoCompleteItemClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Section_AutoComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Section_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Section_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Section_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_Line_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Line_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Line_AutoCompleteItemClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Line_AutoComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Line_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Line_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_Line_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_WhenNextWorkBegin_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_WhenNextWorkBegin_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_WhenNextWorkBegin_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_WhenNextWorkBegin_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_ItemNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ItemNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ItemNo_AutoCompleteItemClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ItemNo_AutoComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ItemNo_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ItemNo_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ItemNo_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_ColorCode_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ColorCode_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ColorCode_AutoCompleteItemClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ColorCode_AutoComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ColorCode_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ColorCode_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_ColorCode_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Close_U_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Close_U_Click(ActionEvent e) throws Exception
        {
                this.closeWindow();
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_ColumClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_Change(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup1_Click(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void pgr_D_Next(ActionEvent e) throws Exception
        {
                RetrievalOrderPrintHead head = (RetrievalOrderPrintHead) session
                        .getAttribute(RETRIEVAL_ORDER_PRINT_HEAD);

                try
                {
                        pageController.turnToNextPage();
                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void pgr_D_Prev(ActionEvent e) throws Exception
        {
                RetrievalOrderPrintHead head = (RetrievalOrderPrintHead) session
                        .getAttribute(RETRIEVAL_ORDER_PRINT_HEAD);

                try
                {
                        pageController.turnToPreviousPage();
                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void pgr_D_Last(ActionEvent e) throws Exception
        {
                RetrievalOrderPrintHead head = (RetrievalOrderPrintHead) session
                        .getAttribute(RETRIEVAL_ORDER_PRINT_HEAD);

                try
                {
                        pageController.turnToLastPage();
                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void pgr_D_First(ActionEvent e) throws Exception
        {
                RetrievalOrderPrintHead head = (RetrievalOrderPrintHead) session
                        .getAttribute(RETRIEVAL_ORDER_PRINT_HEAD);

                try
                {
                        pageController.turnToFirstPage();
                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Input_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Input_Click(ActionEvent e) throws Exception
        {
                List list = new ArrayList();

                for (int j = 1; j < lst_RetrievalOrderPrintPopup2.getMaxRows(); j++)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(j);
                        RetrievalOrderPrintEntity entity = listProxy.getRetrievalOrderPrintEntity();

                        list.add(entity);
                }

                List list2 = new ArrayList();

                for (int i = 1; i < lst_RetrievalOrderPrintPopup1.getMaxRows(); i++)
                {
                        lst_RetrievalOrderPrintPopup1.setCurrentRow(i);
                        RetrievalOrderPrintEntity entity = listProxy.getHeadRetrievalOrderPrintEntity();
                        if (!entity.isSelect() || list.contains(entity))
                        {
                                continue;
                        }
                        entity.setSelect(false);

                        list2.add(entity);
                }

                if (list.size() + list2.size() > 300)
                {
                        message.setMsgResourceKey("7000048");
                        return;
                }

                for (int i = 0; i < list2.size(); i++)
                {
                        RetrievalOrderPrintEntity entity = (RetrievalOrderPrintEntity) list2.get(i);

                        lst_RetrievalOrderPrintPopup2.setCurrentRow(lst_RetrievalOrderPrintPopup2.getMaxRows());
                        lst_RetrievalOrderPrintPopup2.addRow();
                        listProxy.setRowValueByEntity(entity);
                }

                int rows = lst_RetrievalOrderPrintPopup2.getMaxRows() - 1;
                lbl_HowMuch.setText(String.valueOf(rows));
                lbl_HowMuch2.setText(String.valueOf((rows) / 25 + (rows % 25 == 0 ? 0 : 1)));
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_TicketNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_TicketNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_TicketNo_AutoCompleteItemClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_TicketNo_AutoComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_TicketNo_EnterKey(ActionEvent e) throws Exception
        {
                RetrievalOrderPrintHead head = (RetrievalOrderPrintHead) session
                        .getAttribute(RETRIEVAL_ORDER_PRINT_HEAD);

                setFocus(txt_TicketNo);
                txt_TicketNo.validate();
//        setFocus(null);

                List list = new ArrayList();

                for (int j = 1; j < lst_RetrievalOrderPrintPopup2.getMaxRows(); j++)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(j);
                        RetrievalOrderPrintEntity entity = listProxy.getRetrievalOrderPrintEntity();

                        list.add(entity);
                }

                Connection conn = null;
                try
                {
                        conn = ConnectionManager.getConnection();

                        ASRSInfoCentre centre = new ASRSInfoCentre(conn);

                        List list1 = centre.getRetrievalOrderPrintList(head, txt_TicketNo.getText());

                        List list2 = new ArrayList();

                        for (int i = 0; i < list1.size(); i++)
                        {
                                RetrievalOrderPrintEntity entity = (RetrievalOrderPrintEntity) list1.get(i);

                                if (list.contains(entity))
                                {
                                        continue;
                                }
                                entity.setSelect(false);

                                list2.add(entity);
                        }

                        if (list.size() + list2.size() > 300)
                        {
                                message.setMsgResourceKey("7000048");
                                return;
                        }

                        for (int i = 0; i < list2.size(); i++)
                        {
                                RetrievalOrderPrintEntity entity = (RetrievalOrderPrintEntity) list2.get(i);

                                lst_RetrievalOrderPrintPopup2.setCurrentRow(lst_RetrievalOrderPrintPopup2.getMaxRows());
                                lst_RetrievalOrderPrintPopup2.addRow();
                                listProxy.setRowValueByEntity(entity);
                        }

                        int rows = lst_RetrievalOrderPrintPopup2.getMaxRows() - 1;
                        lbl_HowMuch.setText(String.valueOf(rows));
                        lbl_HowMuch2.setText(String.valueOf((rows) / 25 + (rows % 25 == 0 ? 0 : 1)));
                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                }
                finally
                {
                        if (conn != null)
                        {
                                try
                                {
                                        conn.close();
                                }
                                catch (SQLException sqle)
                                {
                                        DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
                                        message.setMsgResourceKey("7200002");
                                }
                        }
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_TicketNo_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_TicketNo_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Input_TicketNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Input_TicketNo_Click(ActionEvent e) throws Exception
        {
                txt_TicketNo_EnterKey(null);
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_BucketNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_BucketNo_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_BucketNo_AutoCompleteItemClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_BucketNo_AutoComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_BucketNo_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_BucketNo_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void txt_BucketNo_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_Total_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_HowMuch_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_Row_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_EnterKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_TabKey(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_InputComplete(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_ColumClick(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_Change(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lst_RetrievalOrderPrintPopup2_Click(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void slb_Download_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void slb_Download_Click(ActionEvent e) throws Exception
        {
                String path = viewState.getString("file");

                ForwardParameters param = new ForwardParameters();
                param.addParameter("file", path);

                redirect("/jsp/SheetDownLoadDummy.jsp", param);
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Delete_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Delete_Click(ActionEvent e) throws Exception
        {
                for (int j = lst_RetrievalOrderPrintPopup2.getMaxRows() - 1; j > 0; j--)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(j);
                        RetrievalOrderPrintEntity entity = listProxy.getRetrievalOrderPrintEntity();

                        if (entity.isSelect())
                        {
                                lst_RetrievalOrderPrintPopup2.removeRow(j);
                        }
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_CSV_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_CSV_Click(ActionEvent e) throws Exception
        {
                List list = new ArrayList();

                for (int j = 1; j < lst_RetrievalOrderPrintPopup2.getMaxRows(); j++)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(j);
                        RetrievalOrderPrintEntity entity = listProxy.getRetrievalOrderPrintEntity();

                        list.add(entity);
                }

                String name = DateFormatUtils.format(new Date(), "yyyyMMddHHmmssSSS");

                String root = getServletContext().getRealPath("/csv");
                String path = "";

                String osName = System.getProperties().getProperty("os.name");
                if (osName.indexOf("Windows") != -1)
                {
                        path = root + "\\" + name + ".csv";
                }
                else
                {
                        path = root + "/" + name + ".csv";
                }
                if (StringUtils.IsNullOrEmpty(path) || list.isEmpty())
                {
                        message.setMsgResourceKey("7000030");
                        return;
                }

                FileOutputStream fos = null;
                OutputStreamWriter osw = null;
                BufferedWriter bw = null;

                try
                {
                        File file = new File(path);

                        fos = new FileOutputStream(file);
                        osw = new OutputStreamWriter(fos, "GB2312");
                        bw = new BufferedWriter(osw);

                        bw.write("部门,生产线,生产开始日,物料编号,物料名称,颜色,数量(PCS),数量(Kg),箱子编号,出库指示,出库时间");
                        bw.write("\r\n");
                        for (int i = 0; i < list.size(); i++)
                        {
                                StringBuffer line = new StringBuffer();

                                RetrievalOrderPrintEntity detail = (RetrievalOrderPrintEntity) list.get(i);

                                line.append(detail.getSection());
                                line.append(",");
                                line.append(detail.getLine());
                                line.append(",");
                                line.append(StringUtils.formatDateFromDBToPage(detail.getWhenNextWorkBegin()));
                                line.append(",");
                                line.append(detail.getItemNo());
                                line.append(",");
                                line.append(detail.getItemName());
                                line.append(",");
                                line.append(detail.getColorCode());
                                line.append(",");
                                line.append(detail.getStockoutCount());
                                line.append(",");
                                line.append(new BigDecimal(detail.getStockoutCount()).multiply(detail.getMeasureUnitWeight()));
                                line.append(",");
                                line.append(detail.getBoxNo());
                                line.append(",");
                                line.append(detail.getRetrievalNo());
                                line.append(",");
                                line.append(StringUtils.formatDateAndTimeFromDBToPage(detail.getStockoutTime()));

                                bw.write(line.toString());
                                bw.write("\r\n");
                        }
                        bw.flush();
                        bw.close();
                        fos.close();
                        osw.close();

                        viewState.setString("file", path);
                        addOnloadScript("slb_Download.click();");
                }
                catch (IOException ex1)
                {
                        DebugPrinter.print(DebugLevel.ERROR, ex1.getMessage());
                        YKKCommonException ex = new YKKCommonException();
                        ex.setResourceKey("7500002");
                        throw ex;
                }
                finally
                {
                        try
                        {
                                if (bw != null)
                                {
                                        bw.close();
                                }
                                if (fos != null)
                                {
                                        fos.close();
                                }
                                if (osw != null)
                                {
                                        osw.close();
                                }
                        }
                        catch (IOException ex1)
                        {
                                DebugPrinter.print(DebugLevel.ERROR, ex1.getMessage());
                                YKKCommonException ex = new YKKCommonException();
                                ex.setResourceKey("7500003");
                                throw ex;
                        }
                }

        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Print_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Print_Click(ActionEvent e) throws Exception
        {
                List list = new ArrayList();

                for (int j = 1; j < lst_RetrievalOrderPrintPopup2.getMaxRows(); j++)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(j);
                        RetrievalOrderPrintEntity entity = listProxy.getRetrievalOrderPrintEntity();

                        list.add(entity);
                }

                int count = list.size();

                setConfirm("YKK-LBL-PrintConfirm" + MessageResource.DELIM
                        + String.valueOf(count)
                );
                getViewState().setBoolean(DIALOG_FLAG, true);
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Close_D_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_Close_D_Click(ActionEvent e) throws Exception
        {
                this.closeWindow();
        }


        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_SelectAllUp_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_SelectAllUp_Click(ActionEvent e) throws Exception
        {
                for (int i = 1; i < lst_RetrievalOrderPrintPopup1.getMaxRows(); i++)
                {
                        lst_RetrievalOrderPrintPopup1.setCurrentRow(i);
                        listProxy.setHeadSelect(true);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_UnselectAllUp_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_UnselectAllUp_Click(ActionEvent e) throws Exception
        {
                for (int i = 1; i < lst_RetrievalOrderPrintPopup1.getMaxRows(); i++)
                {
                        lst_RetrievalOrderPrintPopup1.setCurrentRow(i);
                        listProxy.setHeadSelect(false);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_SelectAllDown_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_SelectAllDown_Click(ActionEvent e) throws Exception
        {
                for (int i = 1; i < lst_RetrievalOrderPrintPopup2.getMaxRows(); i++)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(i);
                        listProxy.setSelect(true);
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_UnselectAllDown_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_UnselectAllDown_Click(ActionEvent e) throws Exception
        {
                for (int i = 1; i < lst_RetrievalOrderPrintPopup2.getMaxRows(); i++)
                {
                        lst_RetrievalOrderPrintPopup2.setCurrentRow(i);
                        listProxy.setSelect(false);
                }
        }


        public void page_ConfirmBack(ActionEvent e) throws Exception
        {

                if (!this.getViewState().getBoolean(DIALOG_FLAG))
                {
                        return;
                }
                boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
                        .booleanValue();
                if (!isExecute)
                {
                        return;
                }
                message.setMsgResourceKey("7000034");
                Connection conn = null;
                try
                {
                        conn = ConnectionManager.getConnection();
                        ASRSInfoCentre centre = new ASRSInfoCentre(conn);

                        String printerName = centre.getPrinterName(getHttpRequest()
                                .getRemoteAddr()
                        );
                        String listKey = centre.generateLabelKey();

                        String sqlString = "INSERT INTO FNPRINTHEAD (listkey,proc_flag,printer_name,listtype,order_flag,range1,range2)VALUES("
                                + StringUtils.surroundWithSingleQuotes(listKey)
                                + ","
                                + StringUtils.surroundWithSingleQuotes("0")
                                + ","
                                + StringUtils.surroundWithSingleQuotes(printerName)
                                + ","
                                + StringUtils.surroundWithSingleQuotes("0")
                                + ","
                                + StringUtils.surroundWithSingleQuotes("0")
                                + ","
                                + StringUtils.surroundWithSingleQuotes(txt_BucketNo.getText())
                                + ","
                                + StringUtils.surroundWithSingleQuotes(this.getUserInfo().getUserId())
                                + ")";
                        DBHandler handler = new DBHandler(conn);
                        handler.executeUpdate(sqlString, true);

                        List entityList = new ArrayList();

                        for (int j = 1; j < lst_RetrievalOrderPrintPopup2.getMaxRows(); j++)
                        {
                                lst_RetrievalOrderPrintPopup2.setCurrentRow(j);
                                RetrievalOrderPrintEntity entity = listProxy.getRetrievalOrderPrintEntity();

                                entityList.add(entity);
                        }

                        for (int i = 0; i < entityList.size(); i++)
                        {
                                RetrievalOrderPrintEntity entity = (RetrievalOrderPrintEntity) entityList
                                        .get(i);

                                sqlString = "INSERT INTO FNPRINTBODY (listKey,range1,range2,range3,range4,range5,range6,range7,range8,range9,range10,range11)VALUES("
                                        + StringUtils.surroundWithSingleQuotes(listKey)
                                        + ","
                                        + StringUtils
                                        .surroundWithSingleQuotes(entity.getSection() + "/" + entity.getLine())
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(StringUtils.formatDateFromDBToPage(entity.getWhenNextWorkBegin()))
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(entity
                                        .getItemNo()
                                )
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(entity
                                        .getItemName().length() > 25 ? entity.getItemName().substring(0, 25) : entity.getItemName()
                                )
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(entity
                                        .getColorCode()
                                )
                                        + ","
                                        + StringUtils
                                        .surroundWithSingleQuotes(DecimalFormat.getIntegerInstance().format(entity.getStockoutCount()))
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(new DecimalFormat("###,###.#######").format(new BigDecimal(entity.getStockoutCount()).multiply(entity.getMeasureUnitWeight())))
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(entity.getBoxNo())
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(entity.getRetrievalNo())
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(StringUtils.formatDateAndTimeFromDBToPage(entity.getStockoutTime()))
                                        + ","
                                        + StringUtils.surroundWithSingleQuotes(org.apache.commons.lang.StringUtils.leftPad(String.valueOf(i+1), 5, '0'))
                                        + ")";
                                handler = new DBHandler(conn);
                                handler.executeUpdate(sqlString, true);

                        }
                        message.setMsgResourceKey("7000017");
                        conn.commit();

                }
                catch (YKKDBException dbEx)
                {
                        String msgString = MessageResources.getText(dbEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7200001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                        try
                        {
                                if (conn != null)
                                {
                                        conn.rollback();
                                }
                        }
                        catch (SQLException ex)
                        {
                                DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
                                message.setMsgResourceKey("7200002");
                        }
                }
                catch (YKKSQLException sqlEx)
                {
                        String msgString = MessageResources.getText(sqlEx.getResourceKey());
                        DebugPrinter.print(DebugLevel.ERROR, msgString);
                        message.setMsgResourceKey("7300001");
                        List paramList = new ArrayList();
                        paramList.add(msgString);
                        message.setMsgParameter(paramList);
                        try
                        {
                                if (conn != null)
                                {
                                        conn.rollback();
                                }
                        }
                        catch (SQLException ex)
                        {
                                DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
                                message.setMsgResourceKey("7200002");
                        }
                }
                finally
                {
                        if (conn != null)
                        {
                                try
                                {
                                        conn.close();
                                }
                                catch (SQLException sqle)
                                {
                                        DebugPrinter.print(DebugLevel.ERROR, sqle.getMessage());
                                        message.setMsgResourceKey("7200002");
                                }
                        }
                }
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_Slash_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_HowMuch2_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void lbl_Page_Server(ActionEvent e) throws Exception
        {
        }


        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_CSV_U_Server(ActionEvent e) throws Exception
        {
        }

        /**
         * @param e ActionEvent
         * @throws Exception
         */
        public void btn_CSV_U_Click(ActionEvent e) throws Exception
        {

                String name = DateFormatUtils.format(new Date(), "yyyyMMddHHmmssSSS");

                Connection conn = null;

                FileOutputStream fos = null;
                OutputStreamWriter osw = null;
                BufferedWriter bw = null;

                try
                {
                        conn = ConnectionManager.getConnection();

                        ASRSInfoCentre centre = new ASRSInfoCentre(conn);

                        List list = centre.getRetrievalOrderPrintList((RetrievalOrderPrintHead) session.getAttribute(RETRIEVAL_ORDER_PRINT_HEAD));

                        String root = getServletContext().getRealPath("/csv");
                        String path = "";

                        String osName = System.getProperties().getProperty("os.name");
                        if (osName.indexOf("Windows") != -1)
                        {
                                path = root + "\\" + name + ".csv";
                        }
                        else
                        {
                                path = root + "/" + name + ".csv";
                        }
                        if (StringUtils.IsNullOrEmpty(path) || list.isEmpty())
                        {
                                message.setMsgResourceKey("7000030");
                                return;
                        }

                        File file = new File(path);

                        fos = new FileOutputStream(file);
                        osw = new OutputStreamWriter(fos, "GB2312");
                        bw = new BufferedWriter(osw);

                        bw.write("部门,生产线,生产开始日,物料编号,物料名称,颜色,数量(PCS),数量(Kg),箱子编号,出库指示,出库时间");
                        bw.write("\r\n");
                        for (int i = 0; i < list.size(); i++)
                        {
                                StringBuffer line = new StringBuffer();

                                RetrievalOrderPrintEntity detail = (RetrievalOrderPrintEntity) list.get(i);

                                line.append(detail.getSection());
                                line.append(",");
                                line.append(detail.getLine());
                                line.append(",");
                                line.append(StringUtils.formatDateFromDBToPage(detail.getWhenNextWorkBegin()));
                                line.append(",");
                                line.append(detail.getItemNo());
                                line.append(",");
                                line.append(detail.getItemName());
                                line.append(",");
                                line.append(detail.getColorCode());
                                line.append(",");
                                line.append(detail.getStockoutCount());
                                line.append(",");
                                line.append(new BigDecimal(detail.getStockoutCount()).multiply(detail.getMeasureUnitWeight()));
                                line.append(",");
                                line.append(detail.getBoxNo());
                                line.append(",");
                                line.append(detail.getRetrievalNo());
                                line.append(",");
                                line.append(StringUtils.formatDateAndTimeFromDBToPage(detail.getStockoutTime()));

                                bw.write(line.toString());
                                bw.write("\r\n");
                        }
                        bw.flush();
                        bw.close();
                        fos.close();
                        osw.close();

                        viewState.setString("file", path);
                        addOnloadScript("slb_Download.click();");
                }
                catch (IOException ex1)
                {
                        DebugPrinter.print(DebugLevel.ERROR, ex1.getMessage());
                        YKKCommonException ex = new YKKCommonException();
                        ex.setResourceKey("7500002");
                        throw ex;
                }
                finally
                {
                        if (conn != null)
                        {
                                try
                                {
                                        conn.close();
                                }
                                catch (SQLException ex1)
                                {
                                        DebugPrinter.print(DebugLevel.ERROR, ex1.getMessage());
                                        YKKDBException ex = new YKKDBException();
                                        ex.setResourceKey("7200002");
                                        throw ex;
                                }
                        }
                        try
                        {
                                if (bw != null)
                                {
                                        bw.close();
                                }
                                if (fos != null)
                                {
                                        fos.close();
                                }
                                if (osw != null)
                                {
                                        osw.close();
                                }
                        }
                        catch (IOException ex1)
                        {
                                DebugPrinter.print(DebugLevel.ERROR, ex1.getMessage());
                                YKKCommonException ex = new YKKCommonException();
                                ex.setResourceKey("7500003");
                                throw ex;
                        }
                }
        }


}
//end of class
