// $Id: StationStatusBusiness.java,v 1.8 2008/02/12 06:21:34 administrator Exp $

/*
 * Copyright 2000-2001 DAIFUKU Co.,Ltd. All Rights Reserved.
 *
 * This software is the proprietary information of DAIFUKU Co.,Ltd.
 * Use is subject to license terms.
 */
package jp.co.daifuku.wms.YkkGMAX.Popup;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import jp.co.daifuku.bluedog.util.MessageResources;
import jp.co.daifuku.bluedog.webapp.ActionEvent;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKDBException;
import jp.co.daifuku.wms.YkkGMAX.Exceptions.YKKSQLException;
import jp.co.daifuku.wms.YkkGMAX.ListProxy.StationStatusListProxy;
import jp.co.daifuku.wms.YkkGMAX.Utils.ASRSInfoCentre;
import jp.co.daifuku.wms.YkkGMAX.Utils.ConnectionManager;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugLevel;
import jp.co.daifuku.wms.YkkGMAX.Utils.Debugprinter.DebugPrinter;
import jp.co.daifuku.wms.base.common.WMSConstants;

/**
 * Ths screen business logic has to be implemented in this class.<BR>
 * This class is generated by ScreenGenerator.
 * 
 * <BR>
 * <TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0">
 * <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
 * <TD>Date</TD>
 * <TD>Name</TD>
 * <TD>Comment</TD>
 * </TR>
 * <TR>
 * <TD>2004/02/13</TD>
 * <TD>N.Sawa(DFK)</TD>
 * <TD>created this class</TD>
 * </TR>
 * </TABLE> <BR>
 * 
 * @version $Revision: 1.8 $, $Date: 2008/02/12 06:21:34 $
 * @author $Author: administrator $
 */
public class StationStatusBusiness extends StationStatus implements
		WMSConstants
{
	// Class fields --------------------------------------------------

	// Class variables -----------------------------------------------

	// Class method --------------------------------------------------

	// Constructors --------------------------------------------------

	// Public methods ------------------------------------------------

	private static final String DIALOG_FLAG1 = "DIALOG_FLAG1";

	private static final String DIALOG_FLAG2 = "DIALOG_FLAG2";

	private StationStatusListProxy listProxy = new StationStatusListProxy(
			lst_StationStatus);

	/**
	 * Initializes the screen.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Load(ActionEvent e) throws Exception
	{
		try
		{
			listProxy.setRowValue();
		}
		catch (YKKDBException dbEx)
		{
			String msgString = MessageResources.getText(dbEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7200001");
			List paramList = new ArrayList();
			paramList.add(msgString);

		}
		catch (YKKSQLException sqlEx)
		{
			String msgString = MessageResources.getText(sqlEx.getResourceKey());
			DebugPrinter.print(DebugLevel.ERROR, msgString);
			message.setMsgResourceKey("7300001");
			List paramList = new ArrayList();
			paramList.add(msgString);
			message.setMsgParameter(paramList);
		}
	}

	/**
	 * Refered before calling each control event.
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void page_Initialize(ActionEvent e) throws Exception
	{
	}

	// Package methods -----------------------------------------------

	// Protected methods ---------------------------------------------

	// Private methods -----------------------------------------------

	// Event handler methods -----------------------------------------
	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectAll_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_SelectAll_Click(ActionEvent e) throws Exception
	{
		for (int i = 1; i < lst_StationStatus.getMaxRows(); i++)
		{
			lst_StationStatus.setCurrentRow(i);

			listProxy.setCheck(true);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_UnselectAll_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_UnselectAll_Click(ActionEvent e) throws Exception
	{
		for (int i = 1; i < lst_StationStatus.getMaxRows(); i++)
		{
			lst_StationStatus.setCurrentRow(i);

			listProxy.setCheck(false);
		}
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_EnterKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_TabKey(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_InputComplete(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_ColumClick(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_Change(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void lst_StationStatus_Click(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_StationStart_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_StationStart_Click(ActionEvent e) throws Exception
	{
		InitDlg();
		checkHasChecked();
		setConfirm("YKK-LBL-SetConfirm");
		getViewState().setBoolean(DIALOG_FLAG1, true);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_StationStop_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_StationStop_Click(ActionEvent e) throws Exception
	{
		InitDlg();
		checkHasChecked();
		setConfirm("YKK-LBL-SetConfirm");
		getViewState().setBoolean(DIALOG_FLAG2, true);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Reshow_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Reshow_Click(ActionEvent e) throws Exception
	{
		page_Load(null);
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Close_Server(ActionEvent e) throws Exception
	{
	}

	/**
	 * 
	 * @param e
	 *            ActionEvent
	 * @throws Exception
	 */
	public void btn_Close_Click(ActionEvent e) throws Exception
	{
		this.closeWindow();
	}

	public void page_ConfirmBack(ActionEvent e) throws Exception
	{

		ArrayList stationList = new ArrayList();
		for (int i = 1; i < lst_StationStatus.getMaxRows(); i++)
		{
			lst_StationStatus.setCurrentRow(i);

			stationList.add(listProxy.getStationNo());
		}
		
		if (this.getViewState().getBoolean(DIALOG_FLAG1))
		{
			boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
					.booleanValue();
			if (!isExecute)
			{
				return;
			}
			message.setMsgResourceKey("7000034");
			Connection conn = null;
			try
			{
				conn = ConnectionManager.getConnection();

				ASRSInfoCentre centre = new ASRSInfoCentre(conn);

				for (int i = 1; i < this.lst_StationStatus.getMaxRows(); i++)
				{
					lst_StationStatus.setCurrentRow(i);
					if (listProxy.getCheck())
					{
						centre.startStation(listProxy.getStationNo());
					}
				    message.setMsgResourceKey("7400002");
					conn.commit();
				}
			}
			catch (YKKDBException dbEx)
			{
				String msgString = MessageResources.getText(dbEx
						.getResourceKey());
				DebugPrinter.print(DebugLevel.ERROR, msgString);
				message.setMsgResourceKey("7200001");
				List paramList = new ArrayList();
				paramList.add(msgString);
				message.setMsgParameter(paramList);
			}
			catch (YKKSQLException sqlEx)
			{
				String msgString = MessageResources.getText(sqlEx
						.getResourceKey());
				DebugPrinter.print(DebugLevel.ERROR, msgString);
				message.setMsgResourceKey("7300001");
				List paramList = new ArrayList();
				paramList.add(msgString);
				message.setMsgParameter(paramList);
			}
			finally
			{
				if (conn != null)
				{
					try
					{
						conn.close();
					}
					catch (SQLException ex)
					{
						DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
						message.setMsgResourceKey("7200002");
					}
				}
			}
		}
		else if (this.getViewState().getBoolean(DIALOG_FLAG2))
		{
			boolean isExecute = new Boolean(e.getEventArgs().get(0).toString())
					.booleanValue();
			if (!isExecute)
			{
				return;
			}
			message.setMsgResourceKey("7000034");
			Connection conn = null;
			try
			{
				conn = ConnectionManager.getConnection();

				ASRSInfoCentre centre = new ASRSInfoCentre(conn);

				for (int i = 1; i < this.lst_StationStatus.getMaxRows(); i++)
				{
					lst_StationStatus.setCurrentRow(i);
					if (listProxy.getCheck())
					{
						centre.stopStation(listProxy.getStationNo());
					}
				    message.setMsgResourceKey("7400002");
					conn.commit();
				}
			}
			catch (YKKDBException dbEx)
			{
				String msgString = MessageResources.getText(dbEx
						.getResourceKey());
				DebugPrinter.print(DebugLevel.ERROR, msgString);
				message.setMsgResourceKey("7200001");
				List paramList = new ArrayList();
				paramList.add(msgString);
				message.setMsgParameter(paramList);
			}
			catch (YKKSQLException sqlEx)
			{
				String msgString = MessageResources.getText(sqlEx
						.getResourceKey());
				DebugPrinter.print(DebugLevel.ERROR, msgString);
				message.setMsgResourceKey("7300001");
				List paramList = new ArrayList();
				paramList.add(msgString);
				message.setMsgParameter(paramList);
			}
			finally
			{
				if (conn != null)
				{
					try
					{
						conn.close();
					}
					catch (SQLException ex)
					{
						DebugPrinter.print(DebugLevel.ERROR, ex.getMessage());
						message.setMsgResourceKey("7200002");
					}
				}
			}
		}
	}

	private void InitDlg()
	{
		this.getViewState().setBoolean(DIALOG_FLAG1,false);
		this.getViewState().setBoolean(DIALOG_FLAG2,false);
	}
	
	private void checkHasChecked()
	{
		boolean hasChecked = false;
		for (int i = 1; i < this.lst_StationStatus.getMaxRows(); i++)
		{
			lst_StationStatus.setCurrentRow(i);
			if (listProxy.getCheck())
			{
				hasChecked = true;
			}
		}
		if (!hasChecked)
		{
			message.setMsgResourceKey("7000013");
			return;
		}
	}

}
// end of class
